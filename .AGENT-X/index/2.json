{
  "summary": {
    "projectRoot": "E:\\CODING\\AGENTX",
    "indexedAt": "2025-08-13T05:25:28.041Z",
    "fileCount": 133,
    "totalBytes": 527818
  },
  "files": [
    {
      "path": ".env",
      "size": 171,
      "mtimeMs": 1755035745356.8828,
      "hash": "b209a47d6b207b9d1379b37eee94906eb9a07eb564ad2cb1f85aeff65ba170e4",
      "sample": "api_key = \"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\"\r\nNVIDIA_API_KEY=\"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\""
    },
    {
      "path": ".env.example",
      "size": 278,
      "mtimeMs": 1755038120266.741,
      "hash": "44247e081106f1d215264f1a4ddb7231b35e7b0b9e90878cbd79563ba5b94545",
      "sample": "# NVIDIA API Configuration\n# Get your API key from: https://build.nvidia.com/experienced-ai/gpt-oss-20b\n\nNVIDIA_API_KEY=\"nvapi-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n# Alternative key name (for backward compatibility)\napi_key=\"nvapi-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\""
    },
    {
      "path": ".github\\workflows\\release.yml",
      "size": 1617,
      "mtimeMs": 1755029211653.0125,
      "hash": "509336d0e9427b655d6dab3be14cc0f332522a24a4e27bd9ffd32a40e4efc474",
      "sample": "name: Release AGENTX\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [18, 20, 22]\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run tests\n      run: npm test\n    \n    - name: Run linting\n      run: npm run lint\n\n  release:\n    needs: test\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Use Node.js 20\n      uses: actions/setup-node@v4\n      with:\n        node-version: 20\n        cache: 'npm'\n        registry-url: 'https://registry.npmjs.org'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Build package\n      run: npm run build\n    \n    - name: Create release package\n      run: npm pack\n    \n    - name: Upload artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: agentx-package\n        path: '*.tgz'\n    \n    - name: Publish to NPM\n      if: startsWith(github.ref, 'refs/tags/')\n      run: npm publish\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n    \n    - name: Create GitHub Release\n      if: startsWith(github.ref, 'refs/tags/')\n      uses: softprops/action-gh-release@v1\n      with:\n        files: '*.tgz'\n        body_path: RELEASE_NOTES.md\n        draft: false\n        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}"
    },
    {
      "path": ".gitignore",
      "size": 23,
      "mtimeMs": 1755016258358.0125,
      "hash": "36dfb0e7cb6b16dd05174c3585ecd10a0594554ab6fb4b32f57e9f60d44ae8da",
      "sample": "/node_modules\r\n.env\r\n\r\n"
    },
    {
      "path": "agent-orchestrator.js",
      "size": 7768,
      "mtimeMs": 1755051932175.111,
      "hash": "9954a19aa9e12daa2ef7db5cb2bc09f80550bffcc6082d014f08966c1270c698",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { spawn } from 'child_process';\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\ndotenv.config();\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nclass AgentOrchestrator {\n  constructor() {\n    this.apiKey = process.env.NVIDIA_API_KEY || process.env.api_key;\n    if (!this.apiKey) {\n      throw new Error('NVIDIA_API_KEY or api_key not found in .env');\n    }\n\n    this.openai = new OpenAI({\n      apiKey: this.apiKey.replace(/\"/g, '').trim(),\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n\n    this.agents = {\n      master: {\n        name: 'Master Agent',\n        role: 'Orchestrates tasks and synthesizes responses',\n        prompt: 'You are the master agent. Analyze the user request, break it into sub-tasks, and coordinate with specialized agents. Provide concise final responses.',\n      },\n      code: {\n        name: 'Code Agent',\n        role: 'Analyzes and modifies code files',\n        prompt: 'You are a code analysis agent. Focus on code quality, bugs, and improvements. Provide specific, actionable feedback.',\n      },\n      doc: {\n        name: 'Documentation Agent',\n        role: 'Creates and updates documentation',\n        prompt: 'You are a documentation agent. Create clear, concise documentation for code and systems.',\n      },\n      test: {\n        name: 'Testing Agent',\n        role: 'Creates and runs tests',\n        prompt: 'You are a testing agent. Create comprehensive tests and validate functionality.',\n      }\n    };\n  }\n\n  async dispatchToAgent(agentType, task, context = {}) {\n    const spinner = ora({\n      text: `${this.agents[agentType].name} processing...`,\n      hideCursor: false,\n    }).start();\n\n    try {\n      const prompt = this.buildAgentPrompt(agentType, task, context);\n      const response = await this.callOpenAI(prompt);\n      \n      spinner"
    },
    {
      "path": "bin\\AGENT-X.js",
      "size": 5440,
      "mtimeMs": 1755061321618.8264,
      "hash": "141bd4c8c1c6092489a49acc74894484b151adf9e1a95c989b8ef938679f90fe",
      "sample": "#!/usr/bin/env node\n\nimport chalk from 'chalk';\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\n// Display fixed header\nconst displayHeader = () => {\n    console.log(`\n    ╔═══════════════════════════════════════════════════════════════╗\n    ║                                                               ║\n    ║   █████╗  ██████╗ ███████╗███╗   ██╗██╗  ██╗███████╗        ║\n    ║  ██╔══██╗██╔═══██╗██╔════╝████╗  ██║██║ ██╔╝██╔════╝        ║\n    ║  ███████║██║   ██║█████╗  ██╔██╗ ██║█████╔╝ █████╗          ║\n    ║  ██╔══██║██║   ██║██╔══╝  ██║╚██╗██║██╔═██╗ ██╔══╝          ║\n    ║  ██║  ██║╚██████╔╝███████╗██║ ╚████║██║  ██╗███████╗        ║\n    ║  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝        ║\n    ║                                                               ║\n    ║  ████████╗ ██████╗ ███╗   ███╗██████╗ ██╗     ███████╗     ║\n    ║  ╚══██╔══╝██╔═══██╗████╗ ████║██╔══██╗██║     ██╔════╝     ║\n    ║     ██║   ██║   ██║██╔████╔██║█████�"
    },
    {
      "path": "chat.js",
      "size": 2560,
      "mtimeMs": 1755040655223.805,
      "hash": "ec3cfbab8778b0873accdac92b7fec2293caa23a19dbe30a9dbcc4b3d71e8268",
      "sample": "#!/usr/bin/env node\r\n\r\nimport OpenAI from 'openai';\r\nimport dotenv from 'dotenv';\r\nimport chalk from 'chalk';\r\nimport { createInterface } from 'readline';\r\n\r\ndotenv.config();\r\n\r\nconst apiKey = process.env.NVIDIA_API_KEY || process.env.api_key;\r\n\r\nif (!apiKey) {\r\n  console.error(chalk.red('❌ Error: NVIDIA_API_KEY or api_key not found in .env file'));\r\n  console.log(chalk.yellow('💡 Add to .env: NVIDIA_API_KEY=\"your-key-here\"'));\r\n  process.exit(1);\r\n}\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: apiKey.replace(/\"/g, '').trim(),\r\n  baseURL: 'https://integrate.api.nvidia.com/v1',\r\n});\r\n\r\nasync function chatMode() {\r\n  console.log(chalk.blue.bold('🤖 NVIDIA GPT-OSS-20B Chat Mode'));\r\n  console.log(chalk.gray('Type \"exit\" to quit\\n'));\r\n  \r\n  const rl = createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n    prompt: chalk.green('You: ')\r\n  });\r\n\r\n  rl.prompt();\r\n\r\n  rl.on('line', async (input) => {\r\n    const message = input.trim();\r\n    \r\n    if (message.toLowerCase() === 'exit') {\r\n      console.log(chalk.yellow('👋 Goodbye!'));\r\n      rl.close();\r\n      return;\r\n    }\r\n\r\n    if (!message) {\r\n      rl.prompt();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(chalk.blue('🤖 Thinking...'));\r\n      \r\n      const completion = await openai.chat.completions.create({\r\n        model: \"openai/gpt-oss-20b\",\r\n        messages: [{ role: 'user', content: message }],\r\n        max_tokens: 1024,\r\n        temperature: 0.7,\r\n        top_p: 0.9,\r\n      });\r\n\r\n      const response = completion.choices[0].message.content;\r\n      console.log(chalk.green('AI: ') + response + '\\n');\r\n      \r\n    } catch (error) {\r\n      console.error(chalk.red('❌ Error:'), error.message);\r\n    }\r\n    \r\n    rl.prompt();\r\n  });\r\n\r\n  rl.on('close', () => {\r\n    console.log(chalk.yellow('👋 Chat ended.'));\r\n    process.exit(0);\r\n  });\r\n}\r\n\r\nasync function singleMessage(message) {\r\n  try {\r\n    const completion = await openai.chat.completions.create({\r\n      model: \"openai/gpt-oss-20b\",\r\n      messages: [{ role: 'user', c"
    },
    {
      "path": "docs\\api-chat-nvidia-oss20b.md",
      "size": 682,
      "mtimeMs": 1755037966334.3591,
      "hash": "f209cec700e6b13d4aa718107d8eaccc65808b08eeff1049eef6143329cd30d3",
      "sample": "import OpenAI from 'openai';\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: '$API_KEY_REQUIRED_IF_EXECUTING_OUTSIDE_NGC',\r\n  baseURL: 'https://integrate.api.nvidia.com/v1',\r\n})\r\n \r\nasync function main() {\r\n  const completion = await openai.chat.completions.create({\r\n    model: \"openai/gpt-oss-120b\",\r\n    messages: [{\"role\":\"user\",\"content\":\"\"}],\r\n    temperature: 1,\r\n    top_p: 1,\r\n    max_tokens: 4096,\r\n    stream: true\r\n  })\r\n   \r\n  for await (const chunk of completion) {\r\n    const reasoning = chunk.choices[0]?.delta?.reasoning_content;\r\n    if (reasoning) process.stdout.write(reasoning);\r\n    process.stdout.write(chunk.choices[0]?.delta?.content || '')\r\n  }\r\n  \r\n}\r\n\r\nmain();"
    },
    {
      "path": "docs\\api-response-nvidia-oss20b.md",
      "size": 814,
      "mtimeMs": 1755037984237.2363,
      "hash": "8f9e3b35c55ea87b7de7a596d4fa4589f83617d9a3806027957c83baa41444c7",
      "sample": "import OpenAI from 'openai';\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: '$API_KEY_REQUIRED_IF_EXECUTING_OUTSIDE_NGC',\r\n  baseURL: 'https://integrate.api.nvidia.com/v1',\r\n});\r\n\r\nasync function main() {\r\n  const response = await openai.responses.create({\r\n    model: \"openai/gpt-oss-120b\",\r\n    input: [\"\"],\r\n    max_output_tokens: 4096,\r\n    top_p: 1,\r\n    temperature: 1,\r\n    stream: true\r\n  });\r\n\r\n  \r\n  let reasoningDone = false;\r\n  for await (const chunk of response) {\r\n    if (chunk.type === \"response.reasoning_text.delta\") {\r\n      process.stdout.write(chunk.delta);\r\n    } else if (chunk.type === \"response.output_text.delta\") {\r\n      if (!reasoningDone) {\r\n        process.stdout.write(\"\\n\");\r\n        reasoningDone = true;\r\n      }\r\n      process.stdout.write(chunk.delta);\r\n    }\r\n  }\r\n  \r\n}\r\n\r\nmain();"
    },
    {
      "path": "docs\\CONTRIBUTING.md",
      "size": 8827,
      "mtimeMs": 1755047285793.2495,
      "hash": "48169a42a3f1d47e84e210374494b4ed3026ccc4fd037ba23f5cecd1dc3436d6",
      "sample": "# 🤝 Contributing to AGENT-X\n\nThank you for your interest in contributing to AGENT-X! This guide will help you get started with contributing to our multi-agent AI system.\n\n## 🚀 Quick Start\n\n### Prerequisites\n- **Node.js 18+** (we test with v18, v20, v22)\n- **Git** for version control\n- **NVIDIA API Key** (for testing)\n\n### Development Setup\n```bash\n# 1. Fork the repository\ngit clone https://github.com/vladnoskv/AGENT-X.git\ncd AGENT-X\n\n# 2. Install dependencies\nnpm install\n\n# 3. Set up environment\ncp .env.example .env\n# Edit .env with your NVIDIA_API_KEY\n\n# 4. Run tests to verify setup\nnpm test\n\n# 5. Start development mode\nnpm run dev\n```\n\n## 🎯 Contribution Types\n\n### 🐛 Bug Reports\n- **Use GitHub Issues** with the `bug` label\n- **Include reproduction steps**\n- **Add error logs and screenshots**\n- **Specify environment details**\n\n### ✨ Feature Requests\n- **Use GitHub Issues** with the `enhancement` label\n- **Describe the use case**\n- **Propose implementation approach**\n- **Consider backward compatibility**\n\n### 🔧 Code Contributions\n- **Bug fixes**: Small, focused changes\n- **New features**: Larger, well-tested additions\n- **Documentation**: README, examples, guides\n- **Tests**: Unit, integration, and e2e tests\n\n## 🏗️ Development Workflow\n\n### Branch Strategy\n```bash\n# Feature branches\ngit checkout -b feature/multi-api-support\ngit checkout -b fix/agent-timeout-issue\ngit checkout -b docs/improve-readme\n\n# Naming convention\nfeature/description\nfix/issue-description\ndocs/what-you-updated\ntest/what-you-tested\n```\n\n### Code Quality\n```bash\n# Run linting\nnpm run lint\n\n# Fix linting issues\nnpm run lint:fix\n\n# Run tests\nnpm test\n\n# Run specific test\nnpm run test:unit\nnpm run test:integration\n```\n\n### Commit Messages\nUse conventional commits:\n```\nfeat: add OpenAI API support\nfix: resolve agent timeout issue\ndocs: update installation guide\ntest: add unit tests for agent.js\nrefactor: improve error handling\nstyle: fix formatting issues\n```\n\n## 🧪 Testing\n\n### Test Structure\n```\ntests/\n├── unit/     "
    },
    {
      "path": "docs\\EXPERT_SYSTEM.md",
      "size": 3424,
      "mtimeMs": 1755043396234.9092,
      "hash": "427b405448194f450900db22fd2df5c4ea585ed65d76d632e1e3d1fe0afa5bb1",
      "sample": "# 🎯 AGENT-X Expert System - Hyper-Specialized AI Agents\r\n\r\n## Overview\r\n\r\nA revolutionary AI system featuring **hyper-expert agents** that specialize in single domains, maintain up-to-date knowledge, and provide focused, contamination-free analysis using the existing `prompts/` directory structure.\r\n\r\n## 🚀 Key Features\r\n\r\n### ✅ Hyper-Expert Focus\r\n- **Single-domain expertise** - Each agent focuses on one specific area\r\n- **Contamination-free** - No cross-domain advice or confusion\r\n- **Expert-level depth** - Deep specialization in chosen domain\r\n\r\n### ✅ Knowledge Freshness\r\n- **Date tracking** - Shows last knowledge update for each agent\r\n- **Web search integration** - Fetches latest information when needed\r\n- **Gap identification** - Alerts when technology is newer than knowledge base\r\n\r\n### ✅ Prompt-Based Architecture\r\n- Uses existing `prompts/` directory structure\r\n- `prompts/agents/` contains specialized agent prompts\r\n- Dynamic prompt updates with latest knowledge\r\n\r\n## 🎯 Expert Agents\r\n\r\n| Agent | Domain | Expertise | Web Search |\r\n|-------|--------|-----------|------------|\r\n| **code-analyzer** | Code Quality | Static analysis, performance, security | ✅ |\r\n| **documentation-writer** | Technical Writing | API docs, tutorials, guides | ❌ |\r\n| **bug-fixer** | Debugging | Error diagnosis, troubleshooting | ❌ |\r\n| **architect** | System Design | Architecture patterns, scalability | ✅ |\r\n| **security-expert** | Security | Vulnerability assessment, compliance | ✅ |\r\n\r\n## 📁 File Structure\r\n\r\n```\r\nAGENTX/\r\n├── prompts/\r\n│   ├── master-agent.md          # Master orchestrator prompt\r\n│   └── agents/\r\n│       ├── code-analyzer.md     # Code analysis expertise\r\n│       ├── documentation-writer.md # Documentation expertise\r\n│       ├── bug-fixer.md         # Debugging expertise\r\n│       ├── architect.md         # Architecture expertise\r\n│       └── security-expert.md   # Security expertise\r\n├── knowledge/                   # "
    },
    {
      "path": "docs\\I18N_GUIDE.md",
      "size": 6279,
      "mtimeMs": 1755043424138.5308,
      "hash": "0343e93f0a04210aaafd9a9ea0d3b24c634c7444444d32e9186636cf901806c9",
      "sample": "# Internationalization Guide (i18n)\n\nAGENT-X now supports multiple languages with a comprehensive internationalization system. This guide explains how to use, configure, and contribute translations.\n\n## Supported Languages\n\nCurrently supported languages:\n- 🇺🇸 English (en) - Default\n- 🇪🇸 Spanish (es)\n- 🇫🇷 French (fr)\n- 🇩🇪 German (de)\n\n## Quick Start\n\n### Using Translations\n\n1. **Interactive CLI with i18n:**\n   ```bash\n   node main/AGENT-X-i18n.js\n   ```\n\n2. **Set language via environment variable:**\n   ```bash\n   # Use Spanish\n   AGENTE_LANG=es node main/AGENT-X-i18n.js\n   \n   # Use French\n   AGENTE_LANG=fr node main/AGENT-X-i18n.js\n   ```\n\n3. **Change language in settings:**\n   - Launch the interactive CLI\n   - Select \"Settings\" from the main menu\n   - Choose your preferred language\n   - Restart the application\n\n## Translation Files Structure\n\nAll translations are stored in the `/locales` directory:\n\n```\nlocales/\n├── en.json          # English (source)\n├── es.json          # Spanish\n├── fr.json          # French\n├── de.json          # German\n├── template.json    # Translation template\n└── translation-report.json  # Completion report\n```\n\n## Translation Keys\n\nThe system uses nested JSON structure with dot notation keys:\n\n```json\n{\n  \"app\": {\n    \"title\": \"Multi-Agent AI CLI Tool\",\n    \"version\": \"v0.0.1\"\n  },\n  \"menu\": {\n    \"title\": \"Main Menu\",\n    \"options\": {\n      \"chat_with_agent\": \"Chat with Agent\",\n      \"list_agents\": \"List Available Agents\"\n    }\n  }\n}\n```\n\n### Key Categories\n\n- `app.*` - Application-wide strings\n- `menu.*` - Menu items and navigation\n- `agents.*` - Agent names and descriptions\n- `chat.*` - Chat interface strings\n- `file.*` - File operation messages\n- `settings.*` - Settings and configuration\n- `errors.*` - Error messages\n- `progress.*` - Progress indicators\n- `ui.*` - User interface elements\n\n## Adding New Languages\n\n### 1. Create New Translation File\n\nCreate a new JSON file in `/locales` using the language code (e.g., `it.json"
    },
    {
      "path": "docs\\RELEASE_CHECKLIST.md",
      "size": 4463,
      "mtimeMs": 1755043468645.544,
      "hash": "aa09c1dd8896c5333cb2ae29426fdda987040f66a21b18b1f49b83c6cbe28d1f",
      "sample": "# 🚀 AGENT-X v0.0.1 Release Checklist\n\n## ✅ Pre-Release Verification\n\n### 📋 Core Functionality\n- [x] **Visual CLI Interface**: Rainbow AGENT-X header working\n- [x] **Multi-Agent System**: 6 agents operational\n- [x] **File System Integration**: Read/write/scan capabilities\n- [x] **Interactive Chat**: Real-time agent conversations\n- [x] **NVIDIA API Integration**: GPT-OSS-20B working\n- [x] **MCP Support**: Codebase context integration\n\n### 📁 Documentation\n- [x] **README.md**: Updated with v0.0.1 branding and features\n- [x] **USAGE.md**: Comprehensive usage guide created\n- [x] **ROADMAP.md**: Detailed development roadmap\n- [x] **CONTRIBUTING.md**: Developer contribution guide\n- [x] **RELEASE_NOTES.md**: Complete release notes\n- [x] **RELEASE_CHECKLIST.md**: This checklist\n\n### 🏗️ Repository Structure\n- [x] **Proper file organization**: main/, utils/, prompts/, components/\n- [x] **GitHub Actions**: CI/CD workflow configured\n- [x] **Package.json**: Updated with proper scripts and metadata\n- [x] **License**: MIT license included\n- [x] **Security**: No secrets in repository\n\n### 🧪 Testing & Quality\n- [x] **Package scripts**: Added test, lint, format commands\n- [x] **ESLint configuration**: Ready for linting\n- [x] **Prettier configuration**: Code formatting ready\n- [x] **Jest setup**: Testing framework configured\n\n## 🎯 GitHub Release Steps\n\n### 1. Create Release Branch\n```bash\ngit checkout -b release/v0.0.1\ngit add .\ngit commit -m \"feat: release v0.0.1 - multi-agent AI CLI tool\"\n```\n\n### 2. Tag Release\n```bash\ngit tag -a v0.0.1 -m \"AGENT-X v0.0.1 - Initial release with 6 specialized agents\"\ngit push origin v0.0.1\n```\n\n### 3. GitHub Release Creation\n- **Go to**: GitHub → Releases → Draft new release\n- **Tag**: v0.0.1\n- **Title**: AGENT-X v0.0.1 - Multi-Agent AI CLI Tool\n- **Description**: Use content from RELEASE_NOTES.md\n- **Assets**: Upload .zip and .tar.gz archives\n\n### 4. NPM Publishing (Future)\n```bash\nnpm login\nnpm publish --access public\n```\n\n## 📊 Release Assets\n\n### Required Files\n- [x]"
    },
    {
      "path": "docs\\RELEASE_NOTES.md",
      "size": 4824,
      "mtimeMs": 1755043438836.8452,
      "hash": "bf119f45cd25b1d1174cd55ff33a66bc6c8703f383674a4c2578c635a5f39af7",
      "sample": "# 🎉 AGENT-X v0.0.1 - Initial Release\n\nWe're excited to announce the first public release of AGENT-X, a sophisticated multi-agent AI system designed to revolutionize software development workflows!\n\n## 🌟 What's New\n\n### **🎨 Visual Interface**\n- **Rainbow AGENT-X Header**: Beautiful gradient display with ASCII art\n- **Interactive Menu System**: Navigate with arrow keys and Enter\n- **Real-time Chat Interface**: Direct conversations with any agent\n- **Progress Indicators**: Visual feedback during operations\n\n### **🤖 6 Specialized Agents**\n- **Master Agent**: Orchestrates tasks and synthesizes responses\n- **CodeAnalyzer**: Deep code analysis and quality assessment\n- **DocumentationWriter**: Generates comprehensive documentation\n- **BugFixer**: Identifies and fixes bugs with detailed explanations\n- **Architect**: Provides system design and architecture guidance\n- **SecurityExpert**: Security analysis and vulnerability assessment\n\n### **🔄 Multi-Agent Orchestration**\n- **Parallel Processing**: All agents work simultaneously\n- **Intelligent Delegation**: Tasks automatically assigned to best-suited agents\n- **Response Synthesis**: Master agent combines insights into coherent answers\n- **Context Awareness**: Full codebase understanding through MCP\n\n### **📁 File System Integration**\n- **Directory Scanning**: Analyze entire codebases\n- **File Operations**: Read, write, and modify files\n- **Search Capabilities**: Find specific patterns across files\n- **Context Building**: Build comprehensive understanding of projects\n\n### **💬 Interactive Features**\n- **Agent Chat**: Direct conversations with any agent\n- **File Attachments**: Include files in conversations\n- **Conversation History**: Persistent chat sessions\n- **Multi-mode Interface**: CLI, chat, and batch modes\n\n## 🚀 Getting Started\n\n### Quick Installation\n```bash\n# Global install\nnpm install -g AGENT-X\n\n# Or run directly\nnpx AGENT-X\n```\n\n### First Steps\n1. **Launch AGENT-X**: `AGENT-X`\n2. **Select \"List Agents\"** to see all available agents\n3. **Choose"
    },
    {
      "path": "docs\\ROADMAP.md",
      "size": 9989,
      "mtimeMs": 1755043403582.5066,
      "hash": "cdeb68897fc2c094f6f410333a811cda89f8cf49af1cf355884aab048cbf08ea",
      "sample": "# 🗺️ AGENT-X Development Roadmap\n\n## 📊 Current System Analysis\n\n### ✅ **What's Working (v0.0.1)**\n- **AGENT-X Visual Interface**: Colorful rainbow header, interactive menu\n- **6 Specialized Agents**: Master, CodeAnalyzer, DocumentationWriter, BugFixer, Architect, SecurityExpert\n- **Multi-Agent Orchestration**: Parallel processing with intelligent synthesis\n- **File System Integration**: Read/write/scan files and directories\n- **NVIDIA GPT-OSS-20B API**: Single API integration working\n- **MCP Support**: Model Context Protocol for codebase context\n- **CLI Commands**: Both interactive and direct command modes\n\n### ⚠️ **Current Limitations**\n- **Single API**: Only NVIDIA GPT-OSS-20B supported\n- **Basic UI**: Limited to terminal-based interface\n- **No API Fallbacks**: Single point of failure\n- **Basic Error Handling**: Limited retry mechanisms\n- **No Rate Limiting**: Could hit API limits\n- **Synchronous Processing**: No true parallel execution\n- **Limited Customization**: Fixed agent personalities\n\n### 🔍 **Architecture Assessment**\n\n#### **Strengths**\n- Modular agent system with clear separation of concerns\n- Extensible prompt-based architecture\n- Rich CLI interface with visual feedback\n- Comprehensive file system integration\n- Strong foundation for multi-API support\n\n#### **Weaknesses**\n- Tight coupling to NVIDIA API\n- No configuration management system\n- Limited testing infrastructure\n- No dependency injection\n- Basic logging and monitoring\n\n## 🚀 **v0.1.0 - Multi-API Foundation**\n\n### **Core Objectives**\n- **Multi-API Support**: OpenAI, Anthropic, Google, Local models\n- **API Manager**: Unified interface for all AI providers\n- **Configuration System**: YAML/JSON-based config management\n- **Enhanced Error Handling**: Retry logic, fallbacks, rate limiting\n\n### **Technical Implementation**\n\n#### **1. API Manager Package (`@AGENT-X/api-manager`)**\n```javascript\n// New package structure\npackages/\n├── api-manager/\n│   ├── src/\n│   │   ├── providers/\n│   │   │   ├── n"
    },
    {
      "path": "docs\\USAGE.md",
      "size": 4040,
      "mtimeMs": 1755043391272.738,
      "hash": "798624d199094b9a795e25306a117862194d022e663792fd7ad77bcb4c6da255",
      "sample": "# 🚀 AGENT-X CLI Usage Guide\n\nWelcome to AGENT-X - the colorful multi-agent AI CLI system! This guide will get you up and running quickly.\n\n## 📋 Quick Start\n\n### 1. Installation & Setup\n```bash\n# Clone the repository\ngit clone [your-repo-url]\ncd nvidia-gpt-cli\n\n# Install dependencies\nnpm install\n\n# Configure your API key\necho \"api_key=your_nvidia_api_key_here\" > .env\n```\n\n### 2. Launch the AGENT-X Interface\n```bash\n# Method 1: Direct launch\nnode agentx.js\n\n# Method 2: Via npm script\nnpm run agentx\n\n# Method 3: Global command (after npm link)\nagentx\n```\n\n### 3. Basic Commands\n\n#### 🎨 AGENT-X Visual Interface\n- **Interactive Mode**: `node agentx.js`\n- **Help**: `node agentx.js --help`\n- **Chat Mode**: Select \"🚀 Interactive Chat\" from menu\n- **Multi-Agent Tasks**: Select \"🤖 Multi-Agent Tasks\"\n\n#### 🔧 Multi-Agent Commands\n```bash\n# List all available agents\nnode multi-agent.js agents\n\n# Run a task with all agents\nnode multi-agent.js run \"Analyze this codebase for security issues\"\n\n# Run with verbose output\nnode multi-agent.js run \"Create documentation\" --verbose\n\n# Use specific agent\nnode multi-agent.js agent code-analyzer \"Review authentication system\"\n\n# Run demo with detailed logs\nnode multi-agent.js demo \"Create a REST API\"\n```\n\n#### 📁 File Operations\n```bash\n# List files in current directory\nnpm start files --list\n\n# Read a file\nnpm start files --read ./package.json\n\n# Search files\nnpm start files --search \"TODO\" --pattern \"*.js\"\n```\n\n### 4. Available Agents\n\n| Agent | Command | Best For |\n|-------|---------|----------|\n| **Master** | `agent master` | Task coordination |\n| **CodeAnalyzer** | `agent code-analyzer` | Code reviews & analysis |\n| **DocumentationWriter** | `agent documentation-writer` | Creating docs |\n| **BugFixer** | `agent bug-fixer` | Debugging & fixes |\n| **Architect** | `agent architect` | System design |\n| **SecurityExpert** | `agent security-expert` | Security analysis |\n\n### 5. Interactive Examples\n\n#### Example 1: Code Analysis\n```bash\n# Launch AGENTX\nnode agentx.js\n\n# S"
    },
    {
      "path": "hyper-expert-orchestrator.js",
      "size": 9622,
      "mtimeMs": 1755041010276.135,
      "hash": "76ec879a4d2a460054f302e293035008450d7cba034b33cc0a7f5ae6b72014e5",
      "sample": "#!/usr/bin/env node\n\nimport { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass HyperExpertOrchestrator {\n  constructor() {\n    this.agents = {\n      'code-analyzer': {\n        name: 'Code Analyzer',\n        expertise: 'Code quality, bug detection, performance analysis',\n        promptFile: 'agents/code-analyzer.md',\n        lastUpdated: null,\n        requiresWebSearch: false\n      },\n      'documentation-writer': {\n        name: 'Documentation Writer',\n        expertise: 'Technical documentation, API docs, tutorials',\n        promptFile: 'agents/documentation-writer.md',\n        lastUpdated: null,\n        requiresWebSearch: false\n      },\n      'bug-fixer': {\n        name: 'Bug Fixer',\n        expertise: 'Debugging, error resolution, troubleshooting',\n        promptFile: 'agents/bug-fixer.md',\n        lastUpdated: null,\n        requiresWebSearch: false\n      },\n      'architect': {\n        name: 'System Architect',\n        expertise: 'System design, architecture decisions, best practices',\n        promptFile: 'agents/architect.md',\n        lastUpdated: null,\n        requiresWebSearch: true\n      },\n      'security-expert': {\n        name: 'Security Expert',\n        expertise: 'Security analysis, vulnerability assessment, secure coding',\n        promptFile: 'agents/security-expert.md',\n        lastUpdated: null,\n        requiresWebSearch: true\n      }\n    };\n    \n    this.knowledgeBase = {};\n    this.webSearchEnabled = false;\n  }\n\n  async initialize() {\n    console.log(chalk.blue.bold('🎯 Hyper-Expert AI System'));\n    console.log(chalk.gray('Initializing specialized agents...'));\n    \n    await this.loadAgentPrompts();\n    await this.checkKnowledgeUpdates();\n    \n    console.log(chalk.green('✅ All agents initialized'));\n  }\n\n  async loadAgentPrompts() {\n    for (const [agentId, agent] of Object.e"
    },
    {
      "path": "i18ntk-reports\\analysis-de.txt",
      "size": 5904,
      "mtimeMs": 1755034857644.4937,
      "hash": "ed497b28b69bab2a4390de74d00280178b4912d6a4344f17e5c1a06f77bbc396",
      "sample": "📊 TRANSLATION ANALYSIS REPORT\n    Generated: 2025-08-12T21:40:57.637Z\n    Status: 73/139 keys (53% translated)\n    Files analyzed: 9/10\n    Keys needing translation: 66\n    \n    📋 FILE BREAKDOWN\n    ==================================================\n\n📄 agents.json\n   📊 📊 Translation: 0/13 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 13\n      Not translated: 13\n\n📄 app.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 chat.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 common.json\n   📊 📊 Translation: 73/73 (100%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 7\n      Same as source: 7\n\n📄 errors.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 file-operations.json\n   ❌ ❌ Translation file missing\n   📊 📊 Source keys: 7\n\n📄 menu.json\n   📊 📊 Translation: 0/14 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 14\n      Not translated: 14\n\n📄 progress.json\n   📊 📊 Translation: 0/4 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 4\n      Not translated: 4\n\n📄 settings.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 ui.json\n   📊 📊 Translation: 0/11 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 11\n      Not translated: 11\n\n📋 KEYS TO TRANSLATE\n==================================================\n\nKey: title\nEnglish: \"Available Agents\"\nde: [NEEDS TRANSLATION]\n\nKey: master.name\nEnglish: \"Master Agent\"\nde: [NEEDS TRANSLATION]\n\nKey: master.description\nEnglish: \"Orchestrates tasks and synthesizes responses from all agents"
    },
    {
      "path": "i18ntk-reports\\analysis-es.txt",
      "size": 5904,
      "mtimeMs": 1755034857655.495,
      "hash": "c4e42794262a679910caf4eef4d58f0c5f2831fefe0a1044530daa8e2b988c63",
      "sample": "📊 TRANSLATION ANALYSIS REPORT\n    Generated: 2025-08-12T21:40:57.652Z\n    Status: 73/139 keys (53% translated)\n    Files analyzed: 9/10\n    Keys needing translation: 66\n    \n    📋 FILE BREAKDOWN\n    ==================================================\n\n📄 agents.json\n   📊 📊 Translation: 0/13 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 13\n      Not translated: 13\n\n📄 app.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 chat.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 common.json\n   📊 📊 Translation: 73/73 (100%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 7\n      Same as source: 7\n\n📄 errors.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 file-operations.json\n   ❌ ❌ Translation file missing\n   📊 📊 Source keys: 7\n\n📄 menu.json\n   📊 📊 Translation: 0/14 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 14\n      Not translated: 14\n\n📄 progress.json\n   📊 📊 Translation: 0/4 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 4\n      Not translated: 4\n\n📄 settings.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 ui.json\n   📊 📊 Translation: 0/11 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 11\n      Not translated: 11\n\n📋 KEYS TO TRANSLATE\n==================================================\n\nKey: title\nEnglish: \"Available Agents\"\nes: [NEEDS TRANSLATION]\n\nKey: master.name\nEnglish: \"Master Agent\"\nes: [NEEDS TRANSLATION]\n\nKey: master.description\nEnglish: \"Orchestrates tasks and synthesizes responses from all agents"
    },
    {
      "path": "i18ntk-reports\\analysis-fr.txt",
      "size": 5904,
      "mtimeMs": 1755034857665.7566,
      "hash": "acfed5e70d4c54e4b8ed1359aa631514b40989964ff73eb8dc87f03b1dcd6827",
      "sample": "📊 TRANSLATION ANALYSIS REPORT\n    Generated: 2025-08-12T21:40:57.663Z\n    Status: 73/139 keys (53% translated)\n    Files analyzed: 9/10\n    Keys needing translation: 66\n    \n    📋 FILE BREAKDOWN\n    ==================================================\n\n📄 agents.json\n   📊 📊 Translation: 0/13 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 13\n      Not translated: 13\n\n📄 app.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 chat.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 common.json\n   📊 📊 Translation: 73/73 (100%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 1\n      Same as source: 1\n\n📄 errors.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 file-operations.json\n   ❌ ❌ Translation file missing\n   📊 📊 Source keys: 7\n\n📄 menu.json\n   📊 📊 Translation: 0/14 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 14\n      Not translated: 14\n\n📄 progress.json\n   📊 📊 Translation: 0/4 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 4\n      Not translated: 4\n\n📄 settings.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 ui.json\n   📊 📊 Translation: 0/11 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 11\n      Not translated: 11\n\n📋 KEYS TO TRANSLATE\n==================================================\n\nKey: title\nEnglish: \"Available Agents\"\nfr: [NEEDS TRANSLATION]\n\nKey: master.name\nEnglish: \"Master Agent\"\nfr: [NEEDS TRANSLATION]\n\nKey: master.description\nEnglish: \"Orchestrates tasks and synthesizes responses from all agents"
    },
    {
      "path": "i18ntk-reports\\analysis-ru.txt",
      "size": 5845,
      "mtimeMs": 1755034857675.4836,
      "hash": "a42e9a92f311ddd3e38ab8faca4107c549b838e2cd468ac7b7254e250f4de6c5",
      "sample": "📊 TRANSLATION ANALYSIS REPORT\n    Generated: 2025-08-12T21:40:57.673Z\n    Status: 73/139 keys (53% translated)\n    Files analyzed: 9/10\n    Keys needing translation: 66\n    \n    📋 FILE BREAKDOWN\n    ==================================================\n\n📄 agents.json\n   📊 📊 Translation: 0/13 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 13\n      Not translated: 13\n\n📄 app.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 chat.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 common.json\n   📊 📊 Translation: 73/73 (100%)\n   🏗️  🗂️  Structure: Consistent\n\n📄 errors.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 file-operations.json\n   ❌ ❌ Translation file missing\n   📊 📊 Source keys: 7\n\n📄 menu.json\n   📊 📊 Translation: 0/14 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 14\n      Not translated: 14\n\n📄 progress.json\n   📊 📊 Translation: 0/4 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 4\n      Not translated: 4\n\n📄 settings.json\n   📊 📊 Translation: 0/6 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 6\n      Not translated: 6\n\n📄 ui.json\n   📊 📊 Translation: 0/11 (0%)\n   🏗️  🗂️  Structure: Consistent\n   ⚠️  ⚠️  Issues found: 11\n      Not translated: 11\n\n📋 KEYS TO TRANSLATE\n==================================================\n\nKey: title\nEnglish: \"Available Agents\"\nru: [NEEDS TRANSLATION]\n\nKey: master.name\nEnglish: \"Master Agent\"\nru: [NEEDS TRANSLATION]\n\nKey: master.description\nEnglish: \"Orchestrates tasks and synthesizes responses from all agents\"\nru: [NEEDS TRANSLATION]\n\nKey: code_analyzer.name\nEnglish:"
    },
    {
      "path": "knowledge\\architect-updates.json",
      "size": 479,
      "mtimeMs": 1755039384468.3591,
      "hash": "2c5616c2deca1c487714d0683c1cc1ee980d113955d55fbcf6d1b0b0d4cae396",
      "sample": "[\n  {\n    \"title\": \"Next.js 14.2 App Router Best Practices\",\n    \"url\": \"https://nextjs.org/docs/app/building-your-application\",\n    \"date\": \"2024-04-20\",\n    \"summary\": \"Latest architectural patterns for Next.js applications\"\n  },\n  {\n    \"title\": \"Microservices vs Monolith 2024 Analysis\",\n    \"url\": \"https://martinfowler.com/articles/microservices-tradeoffs-2024.html\",\n    \"date\": \"2024-02-10\",\n    \"summary\": \"Updated analysis on microservices architecture decisions\"\n  }\n]"
    },
    {
      "path": "knowledge\\code-analyzer-updates.json",
      "size": 492,
      "mtimeMs": 1755039384452.3567,
      "hash": "741be16241b42d3145960e864a8a393ca5ba6b94fc42d742379d4bb9ab51f529",
      "sample": "[\n  {\n    \"title\": \"ESLint 9.0 Released - New Rules and Breaking Changes\",\n    \"url\": \"https://eslint.org/blog/2024/01/eslint-v9.0.0-released/\",\n    \"date\": \"2024-01-15\",\n    \"summary\": \"Major release with new rules and configuration format\"\n  },\n  {\n    \"title\": \"TypeScript 5.4 Performance Improvements\",\n    \"url\": \"https://devblogs.microsoft.com/typescript/announcing-typescript-5-4/\",\n    \"date\": \"2024-03-05\",\n    \"summary\": \"Significant performance improvements in type checking\"\n  }\n]"
    },
    {
      "path": "knowledge\\last-update.json",
      "size": 46,
      "mtimeMs": 1755059212639.3733,
      "hash": "5381202dc8eb63227e066019d1baf5db86d4b06c3e85786b6ecb0f5656ec3dc1",
      "sample": "{\n  \"lastUpdate\": \"2025-08-13T04:26:52.638Z\"\n}"
    },
    {
      "path": "knowledge\\security-expert-updates.json",
      "size": 436,
      "mtimeMs": 1755039384474.3567,
      "hash": "3946ae41335c7325ba49e45fa97e5a943d29cdd6ef49d4a2970aefdca7206544",
      "sample": "[\n  {\n    \"title\": \"CVE-2024-1234: Critical Node.js Vulnerability\",\n    \"url\": \"https://nodejs.org/en/blog/vulnerability/cve-2024-1234\",\n    \"date\": \"2024-03-15\",\n    \"summary\": \"Critical vulnerability affecting Node.js 18.x and 20.x\"\n  },\n  {\n    \"title\": \"OWASP Top 10 2024 Update\",\n    \"url\": \"https://owasp.org/www-project-top-ten/2024/\",\n    \"date\": \"2024-01-30\",\n    \"summary\": \"Updated OWASP Top 10 security risks for 2024\"\n  }\n]"
    },
    {
      "path": "main\\AGENT-X-i18n.js",
      "size": 14064,
      "mtimeMs": 1755037511733.4336,
      "hash": "0dae9b406b0ec4094de8b1df365e47de1a1ed78902e164acf41575d1ba189a96",
      "sample": "#!/usr/bin/env node\n\nimport React from 'react';\nimport { render, Text, Box, useInput, useApp, useState, useEffect } from 'ink';\nimport gradient from 'gradient-string';\nimport MultiAgentSystem from '../multi-agent.js';\nimport uiManager from '../utils/ui-manager.js';\n\n// Initialize UI manager with user's preferred language\nawait uiManager.initialize();\n\n// AGENTX Header Component with i18ntk\nconst AgentXHeader = () => (\n  <Box flexDirection=\"column\" alignItems=\"center\" marginBottom={1}>\n    <Text color=\"cyan\">\n      {gradient.rainbow.multiline(`\n    ███████╗ █████╗ ████████╗██╗  ██╗███████╗\n    ██╔════╝██╔══██╗╚══██╔══╝██║  ██║██╔════╝\n    █████╗  ███████║   ██║   ███████║█████╗  \n    ██╔══╝  ██╔══██║   ██║   ██╔══██║██╔══╝  \n    ██║     ██║  ██║   ██║   ██║  ██║███████╗\n    ╚═╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝\n      `)}\n    </Text>\n    <Text color=\"yellow\" bold>\n      {uiManager.t('app.title')} {uiManager.t('app.version')}\n    </Text>\n    <Text color=\"gray\">\n      {uiManager.t('app.welcome')}\n    </Text>\n  </Box>\n);\n\n// Main Menu Component with i18n\nconst MainMenu = ({ onSelect }) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const menuOptions = [\n    { key: 'chat_with_agent', action: 'chat' },\n    { key: 'list_agents', action: 'list' },\n    { key: 'analyze_codebase', action: 'analyze' },\n    { key: 'generate_docs', action: 'docs' },\n    { key: 'fix_bugs', action: 'fix' },\n    { key: 'security_scan', action: 'security' },\n    { key: 'settings', action: 'settings' },\n    { key: 'help', action: 'help' }\n  ];\n\n  useInput((input, key) => {\n    if (key.upArrow) {\n      setSelectedIndex(Math.max(0, selectedIndex - 1));\n    }"
    },
    {
      "path": "main\\AGENT-X.js",
      "size": 7806,
      "mtimeMs": 1755043814417.0952,
      "hash": "71c0dcf5d7dec563041cbdc2c8d5ef5b8cf084e1626f8183693d2ecb045ffe0d",
      "sample": "#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport figlet from 'figlet';\nimport gradient from 'gradient-string';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\nimport { existsSync } from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst program = new Command();\n\nfunction displayHeader() {\n  console.log(`\n    ╔═══════════════════════════════════════════════════════════════╗\n    ║                                                               ║\n    ║   █████╗  ██████╗ ███████╗███╗   ██╗██╗  ██╗███████╗        ║\n    ║  ██╔══██╗██╔═══██╗██╔════╝████╗  ██║██║ ██╔╝██╔════╝        ║\n    ║  ███████║██║   ██║█████╗  ██╔██╗ ██║█████╔╝ █████╗          ║\n    ║  ██╔══██║██║   ██║██╔══╝  ██║╚██╗██║██╔═██╗ ██╔══╝          ║\n    ║  ██║  ██║╚██████╔╝███████╗██║ ╚████║██║  ██╗███████╗        ║\n    ║  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝        ║\n    ║                                                               ║\n    ║  ████████╗ ██████╗ ███╗   ███╗██████╗ ██╗     ███████╗     ║\n    ║  ╚══██╔══╝██╔═══██╗████╗ ████║██╔══██╗█�"
    },
    {
      "path": "main\\agent.js",
      "size": 18722,
      "mtimeMs": 1755036909189.0454,
      "hash": "dc254911fee63c1606230a25a5e5f74167ac39e9eb70d75ba87ec3400f41547f",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { spawn } from 'child_process';\nimport { WebSocket } from 'ws';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndotenv.config();\n\nclass AIAgent {\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.api_key?.replace(/\"/g, '').trim(),\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n    this.tools = this.getAvailableTools();\n    this.conversation = [];\n  }\n\n  getAvailableTools() {\n    return [\n      {\n        type: 'function',\n        function: {\n          name: 'scan_directory',\n          description: 'Scan a directory and return file structure with metadata',\n          parameters: {\n            type: 'object',\n            properties: {\n              path: { type: 'string', description: 'Directory path to scan' },\n              pattern: { type: 'string', description: 'File pattern to match (optional)' },\n              maxDepth: { type: 'number', description: 'Maximum depth to scan (optional)' }\n            },\n            required: ['path']\n          }\n        }\n      },\n      {\n        type: 'function',\n        function: {\n          name: 'read_file',\n          description: 'Read and return the contents of a file',\n          parameters: {\n            type: 'object',\n            properties: {\n              path: { type: 'string', description: 'File path to read' },\n              lineStart: { type: 'number', description: 'Start line number (optional)' },\n              lineEnd: { type: 'number', description: 'End line number (optional)' }\n            },\n            required: ['path']\n          }\n        }\n      },\n      {\n        type: 'function',\n        function: {\n          name: 'write_file',\n          description: 'Write content to a file (creates directories if needed)',\n          parameters: {\n            "
    },
    {
      "path": "main\\agentx-i18n.js",
      "size": 14064,
      "mtimeMs": 1755043803315.8103,
      "hash": "0dae9b406b0ec4094de8b1df365e47de1a1ed78902e164acf41575d1ba189a96",
      "sample": "#!/usr/bin/env node\n\nimport React from 'react';\nimport { render, Text, Box, useInput, useApp, useState, useEffect } from 'ink';\nimport gradient from 'gradient-string';\nimport MultiAgentSystem from '../multi-agent.js';\nimport uiManager from '../utils/ui-manager.js';\n\n// Initialize UI manager with user's preferred language\nawait uiManager.initialize();\n\n// AGENTX Header Component with i18ntk\nconst AgentXHeader = () => (\n  <Box flexDirection=\"column\" alignItems=\"center\" marginBottom={1}>\n    <Text color=\"cyan\">\n      {gradient.rainbow.multiline(`\n    ███████╗ █████╗ ████████╗██╗  ██╗███████╗\n    ██╔════╝██╔══██╗╚══██╔══╝██║  ██║██╔════╝\n    █████╗  ███████║   ██║   ███████║█████╗  \n    ██╔══╝  ██╔══██║   ██║   ██╔══██║██╔══╝  \n    ██║     ██║  ██║   ██║   ██║  ██║███████╗\n    ╚═╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝\n      `)}\n    </Text>\n    <Text color=\"yellow\" bold>\n      {uiManager.t('app.title')} {uiManager.t('app.version')}\n    </Text>\n    <Text color=\"gray\">\n      {uiManager.t('app.welcome')}\n    </Text>\n  </Box>\n);\n\n// Main Menu Component with i18n\nconst MainMenu = ({ onSelect }) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const menuOptions = [\n    { key: 'chat_with_agent', action: 'chat' },\n    { key: 'list_agents', action: 'list' },\n    { key: 'analyze_codebase', action: 'analyze' },\n    { key: 'generate_docs', action: 'docs' },\n    { key: 'fix_bugs', action: 'fix' },\n    { key: 'security_scan', action: 'security' },\n    { key: 'settings', action: 'settings' },\n    { key: 'help', action: 'help' }\n  ];\n\n  useInput((input, key) => {\n    if (key.upArrow) {\n      setSelectedIndex(Math.max(0, selectedIndex - 1));\n    }"
    },
    {
      "path": "main\\agentx-ui.js",
      "size": 9924,
      "mtimeMs": 1755043384368.489,
      "hash": "6c6a66048be78971e3ed0834f75524ec23edc835a0a6487fc8e961f09fe544fc",
      "sample": "#!/usr/bin/env node\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { render, Box, Text, useApp, useInput, useStdout, Static, Newline } from 'ink';\nimport SelectInput from 'ink-select-input';\nimport TextInput from 'ink-text-input';\nimport Spinner from 'ink-spinner';\nimport Gradient from 'ink-gradient';\nimport BigText from 'ink-big-text';\nimport Divider from 'ink-divider';\nimport settingsManager from '../utils/settings-manager.js';\n\nconst AGENTE_UI = () => {\n  const { exit } = useApp();\n  const [currentScreen, setCurrentScreen] = useState('main');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [settings, setSettings] = useState(settingsManager.getAll());\n  const [notifications, setNotifications] = useState([]);\n  const [agentStatus, setAgentStatus] = useState({});\n\n  // Add notification\n  const addNotification = useCallback((message, type = 'info') => {\n    const id = Date.now();\n    setNotifications(prev => [...prev.slice(-4), { id, message, type }]);\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== id));\n    }, 5000);\n  }, []);\n\n  // Main menu items\n  const mainMenuItems = [\n    { label: '🗣️  Interactive Chat', value: 'chat' },\n    { label: '🤖 Run Agent', value: 'agent' },\n    { label: '👥 Multi-Agent Demo', value: 'demo' },\n    { label: '⚙️  Settings', value: 'settings' },\n    { label: 'ℹ️  About', value: 'about' },\n    { label: '🚪 Exit', value: 'exit' }\n  ];\n\n  // Settings menu items\n  const settingsMenuItems = [\n    { label: '🔧 API Configuration', value: 'api' },\n    { label: '🎨 UI Preferences', value: 'ui' },\n    { label: '🤖 Agent Settings', value: 'agents' },\n    { label: '💾 Backup & Restore', value: 'backup' },\n    { label: '🔍 View Current Settings', value: 'view' },\n    { label: '← Back to Main Menu', value: 'back' }\n  ];\n\n  // Handle menu selection\n  const handleMainSelect = async (item) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      switch ("
    },
    {
      "path": "main\\multi-agent.js",
      "size": 10444,
      "mtimeMs": 1755036970137.038,
      "hash": "068b4c8083ea13b08bad4b176144c15e0c4883f68f899089df5ce1a23c22eef4",
      "sample": "#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport OpenAI from 'openai';\nimport { fileURLToPath } from 'url';\nimport dotenv from 'dotenv';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndotenv.config();\n\nclass MultiAgentSystem {\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.api_key?.replace(/\"/g, '').trim(),\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n    this.agents = {\n      master: 'master-agent.md',\n      codeAnalyzer: 'agents/code-analyzer.md',\n      documentationWriter: 'agents/documentation-writer.md',\n      bugFixer: 'agents/bug-fixer.md',\n      architect: 'agents/architect.md',\n      securityExpert: 'agents/security-expert.md'\n    };\n    this.promptsPath = path.join(__dirname, 'prompts');\n  }\n\n  async loadPrompt(agentName) {\n    try {\n      const promptFile = path.join(this.promptsPath, this.agents[agentName]);\n      if (await fs.pathExists(promptFile)) {\n        return await fs.readFile(promptFile, 'utf-8');\n      }\n      return null;\n    } catch (error) {\n      console.error(chalk.red(`Error loading prompt for ${agentName}:`, error.message));\n      return null;\n    }\n  }\n\n  async analyzeTask(task) {\n    const masterPrompt = await this.loadPrompt('master');\n    const currentDir = process.cwd();\n    \n    const analysisPrompt = `${masterPrompt}\n\nCurrent task: ${task}\nWorking directory: ${currentDir}\n\nAnalyze this task and determine:\n1. Which sub-agents should be involved\n2. How to break it into sub-tasks\n3. The priority order for agent execution\n\nProvide your analysis in JSON format:\n{\n  \"agents\": [\"agent1\", \"agent2\", \"agent3\"],\n  \"subTasks\": [\n    {\"agent\": \"agent1\", \"task\": \"specific task 1\", \"priority\": 1},\n    {\"agent\": \"agent2\", \"task\": \"specific task 2\", \"priority\": 2}\n  ],\n  \"synthesisStrategy\": \"how to combine results\"\n}`;\n\n    const completion = await this.openai.chat.completions.create("
    },
    {
      "path": "package-lock.json",
      "size": 66780,
      "mtimeMs": 1755059438535.545,
      "hash": "acef22b79b1b2e4253d58530fe0fc5b22b9dad21d33fc5e62979540233a74b5f",
      "sample": "{\n  \"name\": \"AGENT-X\",\n  \"version\": \"0.0.1\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"AGENT-X\",\n      \"version\": \"0.0.1\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"chalk\": \"^5.3.0\",\n        \"dotenv\": \"^16.4.5\",\n        \"ink\": \"^4.4.1\",\n        \"inquirer\": \"^9.2.14\",\n        \"openai\": \"^4.53.0\",\n        \"ora\": \"^8.1.0\",\n        \"react\": \"^18.2.0\"\n      },\n      \"bin\": {\n        \"AGENT-X\": \"bin/AGENT-X.js\",\n        \"AGENT-X-chat\": \"chat.js\",\n        \"AGENT-X-response\": \"response.js\"\n      },\n      \"engines\": {\n        \"node\": \">=18.0.0\"\n      }\n    },\n    \"node_modules/@alcalzone/ansi-tokenize\": {\n      \"version\": \"0.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/@alcalzone/ansi-tokenize/-/ansi-tokenize-0.1.3.tgz\",\n      \"integrity\": \"sha512-3yWxPTq3UQ/FY9p1ErPxIyfT64elWaMvM9lIHnaqpyft63tkxodF5aUElYHrdisWve5cETkh1+KBw1yJuW0aRw==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"ansi-styles\": \"^6.2.1\",\n        \"is-fullwidth-code-point\": \"^4.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=14.13.1\"\n      }\n    },\n    \"node_modules/@inquirer/figures\": {\n      \"version\": \"1.0.13\",\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.13.tgz\",\n      \"integrity\": \"sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==\",\n      \"license\": \"MIT\",\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/@types/node\": {\n      \"version\": \"18.19.122\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-18.19.122.tgz\",\n      \"integrity\": \"sha512-yzegtT82dwTNEe/9y+CM8cgb42WrUfMMCg2QqSddzO1J6uPmBD7qKCZ7dOHZP2Yrpm/kb0eqdNMn2MUyEiqBmA==\",\n      \"license\": \"MIT\",\n      \"dependencies\": {\n        \"undici-types\": \"~5.26.4\"\n      }\n    },\n    \"node_modules/@types/node-fetch\": {\n      \"version\": \"2.6.13\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.13.tgz\",\n      \"integrity\": \"sha512-QGpRVpzSaUs30JBSGPjOg4Uveu384erbHBoT1zeONvyCfwQxIk"
    },
    {
      "path": "package.json",
      "size": 1311,
      "mtimeMs": 1755061504190.7134,
      "hash": "769a66952e16791a5a7ad2d5aef6a2c77c57c950054038626bc729f634c18baf",
      "sample": "{\n  \"name\": \"AGENT-X\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Agent Everything - Multi-agent AI CLI system with NVIDIA GPT-OSS-20B integration\",\n  \"main\": \"./bin/AGENT-X.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node bin/AGENT-X.js\",\n    \"dev\": \"nodemon bin/AGENT-X.js\",\n    \"menu\": \"node bin/AGENT-X.js menu\",\n    \"chat\": \"node src/commands/chat.js\",\n    \"response\": \"node src/commands/response.js\",\n    \"agent\": \"node src/core/orchestrators/agent-orchestrator.js\",\n    \"expert\": \"node src/agents/expert/hyper-expert-orchestrator.js\",\n    \"update-knowledge\": \"node src/knowledge/knowledge-updater.js\",\n    \"index\": \"node src/commands/index-codebase.js\",\n    \"test\": \"node ./tests/test-agent-system.js\",\n    \"test-expert\": \"node ./tests/test-expert-system.js\",\n    \"ink\": \"node bin/AGENT-X.js\"\n  },\n  \"keywords\": [\n    \"nvidia\",\n    \"gpt\",\n    \"cli\",\n    \"chat\",\n    \"api\"\n  ],\n  \"bin\": {\n    \"AGENT-X\": \"./bin/AGENT-X.js\",\n    \"AGENT-X-chat\": \"./src/commands/chat.js\",\n    \"AGENT-X-response\": \"./src/commands/response.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^5.3.0\",\n    \"dotenv\": \"^16.4.5\",\n    \"ink\": \"^4.4.1\",\n    \"openai\": \"^4.53.0\",\n    \"ora\": \"^8.1.0\",\n    \"inquirer\": \"^9.2.14\",\n    \"react\": \"^18.2.0\"\n  }\n}\n"
    },
    {
      "path": "prompts\\agents\\architect.md",
      "size": 4464,
      "mtimeMs": 1755016302762.3728,
      "hash": "a9b8cd45cbdf6fde70e86a8bf999b9d55239b6aa252b85a89ef9fc04c636788e",
      "sample": "# Architect Agent - System Prompt\n\nYou are the Architect Agent, specialized in system design, architecture decisions, and long-term technical strategy.\n\n## Core Capabilities\n\n### 1. System Design\n- **Architecture Patterns**: Microservices, monolith, serverless, event-driven\n- **Technology Selection**: Choose appropriate technologies and frameworks\n- **Scalability Planning**: Design for growth and performance\n- **Integration Design**: API design, data flow, service boundaries\n\n### 2. Code Organization\n- **Project Structure**: Organize code for maintainability and clarity\n- **Module Design**: Create cohesive, loosely coupled modules\n- **Naming Conventions**: Establish consistent naming across the codebase\n- **Dependency Management**: Manage dependencies and version conflicts\n\n### 3. Performance Architecture\n- **Caching Strategy**: Design effective caching layers\n- **Database Design**: Schema design, indexing, query optimization\n- **Load Balancing**: Design for high availability and performance\n- **Resource Management**: Optimize memory, CPU, and network usage\n\n### 4. Security Architecture\n- **Security Patterns**: Implement defense-in-depth strategies\n- **Authentication/Authorization**: Design secure access control\n- **Data Protection**: Encryption, secure storage, transmission\n- **Compliance**: Meet regulatory and industry standards\n\n## Architecture Framework\n\n### Design Principles\n1. **SOLID Principles**: Single responsibility, open/closed, etc.\n2. **DRY**: Don't repeat yourself\n3. **KISS**: Keep it simple, stupid\n4. **YAGNI**: You aren't gonna need it\n5. **Separation of Concerns**: Clear boundaries between components\n\n### Design Patterns\n- **Creational**: Factory, builder, singleton\n- **Structural**: Adapter, decorator, facade\n- **Behavioral**: Observer, strategy, command\n- **Architectural**: MVC, MVVM, microservices\n\n### Decision Process\n1. **Requirements Analysis**: Understand functional and non-functional requirements\n2. **Constraint Identification**: Identify technical and business constraints\n3. **Option Eva"
    },
    {
      "path": "prompts\\agents\\bug-fixer.md",
      "size": 3556,
      "mtimeMs": 1755016280144.7522,
      "hash": "36b14df54de411a7f639f2991ff975634e0eb368fe63f6cdcb8c8a907231c677",
      "sample": "# BugFixer Agent - System Prompt\n\nYou are the BugFixer Agent, specialized in diagnosing, debugging, and fixing code issues efficiently and effectively.\n\n## Core Capabilities\n\n### 1. Bug Diagnosis\n- **Error Analysis**: Parse error messages and stack traces\n- **Root Cause Identification**: Find the underlying cause, not just symptoms\n- **Reproduction Steps**: Create minimal reproduction cases\n- **Impact Assessment**: Evaluate the severity and scope of bugs\n\n### 2. Debugging Techniques\n- **Systematic Debugging**: Step-by-step debugging methodology\n- **Logging Strategy**: Implement appropriate logging for diagnosis\n- **Testing Strategy**: Create tests to verify fixes\n- **Performance Debugging**: Identify performance bottlenecks\n\n### 3. Fix Implementation\n- **Minimal Changes**: Make the smallest possible changes to fix issues\n- **Backward Compatibility**: Ensure fixes don't break existing functionality\n- **Edge Case Handling**: Consider all possible edge cases\n- **Regression Prevention**: Add tests to prevent future regressions\n\n### 4. Code Quality\n- **Clean Fixes**: Ensure fixes follow coding standards\n- **Documentation**: Update comments and documentation for changes\n- **Performance**: Ensure fixes don't introduce performance issues\n- **Security**: Verify fixes don't introduce security vulnerabilities\n\n## Debugging Framework\n\n### Issue Classification\n1. **Syntax Errors**: Missing brackets, typos, import issues\n2. **Runtime Errors**: Null pointers, type mismatches, resource issues\n3. **Logic Errors**: Incorrect algorithms, wrong conditions\n4. **Performance Issues**: Slow algorithms, memory leaks\n5. **Integration Issues**: API mismatches, dependency problems\n\n### Debugging Process\n1. **Reproduce**: Confirm the issue exists\n2. **Isolate**: Create minimal reproduction case\n3. **Analyze**: Identify root cause\n4. **Fix**: Implement targeted solution\n5. **Test**: Verify the fix works\n6. **Prevent**: Add regression tests\n\n## Response Format\n\nStructure all bug fixes as:\n```\n## Bug Analysis\n**Issue**: [Clear description of th"
    },
    {
      "path": "prompts\\agents\\code-analyzer.md",
      "size": 2648,
      "mtimeMs": 1755016371081.7693,
      "hash": "585684e1ff7121f71c9d3805a7849c5b56eab40de02b3a55d68977e0dfe1e8a5",
      "sample": "# CodeAnalyzer Agent - System Prompt\n\nYou are the CodeAnalyzer Agent, specialized in deep code analysis, bug detection, and performance optimization.\n\n## Core Capabilities\n\n### 1. Code Quality Analysis\n- **Syntax Checking**: Identify syntax errors, typos, and formatting issues\n- **Code Style**: Enforce consistent coding standards and best practices\n- **Complexity Metrics**: Calculate cyclomatic complexity, maintainability index\n- **Duplication Detection**: Find code duplication and suggest refactoring\n\n### 2. Bug Detection\n- **Static Analysis**: Identify potential runtime errors\n- **Logic Errors**: Detect logical flaws and edge cases\n- **Resource Leaks**: Find memory leaks, file handle issues\n- **Race Conditions**: Identify threading and async issues\n\n### 3. Performance Analysis\n- **Algorithm Efficiency**: Analyze time/space complexity\n- **Database Queries**: Identify N+1 queries and optimization opportunities\n- **Memory Usage**: Detect memory-intensive patterns\n- **I/O Operations**: Optimize file and network operations\n\n### 4. Security Analysis\n- **Injection Vulnerabilities**: SQL injection, XSS, command injection\n- **Authentication Issues**: Weak auth patterns, session management\n- **Data Exposure**: Sensitive data leaks, encryption issues\n- **Dependency Vulnerabilities**: Check for known CVEs\n\n## Analysis Framework\n\nFor each code review:\n1. **Readability**: Is the code easy to understand?\n2. **Maintainability**: Can it be easily modified?\n3. **Efficiency**: Are there performance bottlenecks?\n4. **Security**: Are there security vulnerabilities?\n5. **Testing**: Are edge cases covered?\n\n## Response Format\n\nProvide analysis in this structure:\n```\n## Analysis Summary\n[Brief overview]\n\n## Issues Found\n- **Critical**: [List critical issues]\n- **High**: [List high-priority issues]\n- **Medium**: [List medium-priority issues]\n- **Low**: [List minor improvements]\n\n## Code Quality Metrics\n- **Complexity Score**: [1-10]\n- **Maintainability Index**: [1-100]\n- **Security Risk**: [Low/Medium/High]\n\n## Recommendations\n[Specifi"
    },
    {
      "path": "prompts\\agents\\documentation-writer.md",
      "size": 2875,
      "mtimeMs": 1755016260222.7527,
      "hash": "f53cf5bd94ee24fb8a072757b5211118c24da923e45195580c64f161746c8065",
      "sample": "# DocumentationWriter Agent - System Prompt\n\nYou are the DocumentationWriter Agent, specialized in creating comprehensive, clear, and user-friendly documentation for software projects.\n\n## Core Capabilities\n\n### 1. README Generation\n- **Project Overview**: Concise project description and purpose\n- **Installation Guide**: Step-by-step setup instructions\n- **Usage Examples**: Practical code examples and use cases\n- **Contributing Guidelines**: How to contribute to the project\n- **License Information**: Appropriate license details\n\n### 2. API Documentation\n- **Endpoint Documentation**: RESTful API endpoints with examples\n- **Parameter Descriptions**: Input/output parameters with types\n- **Response Examples**: JSON/XML response formats\n- **Error Handling**: Common error codes and solutions\n- **Authentication**: API key usage and security\n\n### 3. Code Documentation\n- **Inline Comments**: Clear, concise code comments\n- **Function Documentation**: JSDoc/Sphinx-style documentation\n- **Class Documentation**: Object-oriented design documentation\n- **Module Documentation**: Package/module-level descriptions\n- **Configuration Documentation**: Environment variables and settings\n\n### 4. User Guides\n- **Getting Started**: Beginner-friendly tutorials\n- **Advanced Usage**: Complex scenarios and edge cases\n- **Troubleshooting**: Common issues and solutions\n- **Best Practices**: Recommended usage patterns\n- **Migration Guides**: Version upgrade instructions\n\n## Documentation Standards\n\n### Writing Style\n- **Clarity**: Use simple, direct language\n- **Consistency**: Maintain consistent terminology\n- **Completeness**: Cover all features and edge cases\n- **Accuracy**: Ensure all examples are tested and correct\n- **Accessibility**: Write for both technical and non-technical audiences\n\n### Formatting Guidelines\n- **Markdown**: Use proper markdown syntax\n- **Code Blocks**: Syntax highlighting for all code examples\n- **Tables**: Use tables for parameter lists and comparisons\n- **Lists**: Use bullet points and numbered lists appropriately\n-"
    },
    {
      "path": "prompts\\agents\\security-expert.md",
      "size": 4713,
      "mtimeMs": 1755016331186.4473,
      "hash": "53bdf78d3709c37b5c5c71780826b352ddba2ce08a9cc62bc9f62c6f8c820568",
      "sample": "# SecurityExpert Agent - System Prompt\n\nYou are the SecurityExpert Agent, specialized in security analysis, vulnerability assessment, and implementing secure coding practices.\n\n## Core Capabilities\n\n### 1. Vulnerability Assessment\n- **Static Analysis**: Identify security vulnerabilities in code\n- **Dynamic Analysis**: Runtime security testing\n- **Dependency Scanning**: Check for known vulnerabilities in dependencies\n- **Configuration Review**: Security configuration analysis\n\n### 2. Security Patterns\n- **Authentication**: Implement secure authentication mechanisms\n- **Authorization**: Role-based access control (RBAC)\n- **Input Validation**: Prevent injection attacks\n- **Output Encoding**: Prevent XSS and other injection attacks\n\n### 3. Compliance & Standards\n- **OWASP Top 10**: Address the most critical security risks\n- **CWE/SANS**: Common weakness enumeration\n- **Industry Standards**: PCI-DSS, HIPAA, GDPR compliance\n- **Security Frameworks**: NIST, ISO 27001 guidelines\n\n### 4. Secure Development\n- **Code Review**: Security-focused code reviews\n- **Threat Modeling**: Identify potential security threats\n- **Security Testing**: Penetration testing and vulnerability scanning\n- **Incident Response**: Security incident handling procedures\n\n## Security Analysis Framework\n\n### Vulnerability Categories\n1. **Injection Attacks**: SQL, NoSQL, Command, LDAP injection\n2. **Authentication Issues**: Weak passwords, session management\n3. **Sensitive Data Exposure**: Unencrypted data, weak encryption\n4. **XML External Entities (XXE)**: XML parser vulnerabilities\n5. **Broken Access Control**: Insecure direct object references\n6. **Security Misconfiguration**: Default configurations, unnecessary features\n7. **Cross-Site Scripting (XSS)**: Stored, reflected, DOM-based XSS\n8. **Insecure Deserialization**: Untrusted data deserialization\n9. **Using Components with Known Vulnerabilities**: Outdated dependencies\n10. **Insufficient Logging & Monitoring**: Missing security events\n\n### Assessment Process\n1. **Asset Identification**: Identi"
    },
    {
      "path": "prompts\\master-agent.md",
      "size": 2634,
      "mtimeMs": 1755016228731.771,
      "hash": "abb6825208bf9de1546b5e9ad2bcd91d7b21249100fc986f3e332d963be70846",
      "sample": "# Master Agent - System Prompt\n\nYou are the Master Agent in a multi-agent AI system. Your role is to coordinate, delegate, and synthesize responses from specialized sub-agents.\n\n## Core Responsibilities\n\n1. **Task Analysis**: Break down complex requests into manageable sub-tasks\n2. **Agent Assignment**: Assign tasks to the most appropriate sub-agents based on their specializations\n3. **Response Synthesis**: Filter, combine, and refine responses from sub-agents\n4. **Quality Control**: Ensure final responses meet quality standards and user requirements\n5. **Context Management**: Maintain awareness of project state, file structure, and previous interactions\n\n## Available Sub-Agents\n\n### CodeAnalyzer Agent\n- **Specialization**: Code analysis, bug detection, performance optimization\n- **Strengths**: Static analysis, pattern recognition, security auditing\n- **Best for**: Code reviews, bug hunting, performance analysis\n\n### DocumentationWriter Agent  \n- **Specialization**: Creating and updating documentation\n- **Strengths**: Technical writing, API docs, README files, tutorials\n- **Best for**: Documentation generation, code comments, user guides\n\n### BugFixer Agent\n- **Specialization**: Debugging and fixing code issues\n- **Strengths**: Error diagnosis, patch generation, testing\n- **Best for**: Bug fixes, error resolution, troubleshooting\n\n### Architect Agent\n- **Specialization**: System design and architecture decisions\n- **Strengths**: Design patterns, scalability, best practices\n- **Best for**: Architecture reviews, refactoring plans, system design\n\n### SecurityExpert Agent\n- **Specialization**: Security analysis and vulnerability assessment\n- **Strengths**: Security patterns, vulnerability detection, secure coding\n- **Best for**: Security audits, vulnerability fixes, compliance checks\n\n## Decision Framework\n\nWhen receiving a request:\n1. **Analyze**: Determine the nature of the request (analysis, creation, debugging, etc.)\n2. **Delegate**: Assign to 1-3 most relevant sub-agents\n3. **Synthesize**: Combine responses, res"
    },
    {
      "path": "README.md",
      "size": 5508,
      "mtimeMs": 1755043321328.4778,
      "hash": "929467645a355b516938bf1e3f6a6cad271dbc27872f7f36338b23e696dc5c74",
      "sample": "# 🤖 AGENT-X - Agent Everything - Enhanced NVIDIA GPT-OSS-20B CLI\n\nA sophisticated multi-agent CLI system that orchestrates specialized agents for complex tasks, built on NVIDIA's GPT-OSS-20B API.\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js 18+\n- NVIDIA API key\n\n### Installation\n```bash\nnpm install\n```\n\n### Setup API Key\n```bash\ncp .env.example .env\n# Edit .env and add your NVIDIA_API_KEY\n```\n\n## 📋 Available Commands\n\n### Interactive Menu System\n```bash\nnode menu.js        # Main menu with all options\nnode AGENT-X.js     # Alias for menu\n```\n\n### Direct Commands\n```bash\n# Basic modes\nnode chat.js \"Hello, how are you?\"          # Direct chat\nnode response.js \"Explain quantum computing\" # Direct response\n\n# Advanced orchestration\nnode agent-orchestrator.js \"Add error handling to server.js\" --file server.js\nnode test-agent-system.js                    # Run validation tests\n\n# MCP Server\nnode mcp-server.js                          # Start file system server\n```\n\n## 🎯 System Components\n\n### 1. **Agent Orchestrator** (`agent-orchestrator.js`)\n- **Master Agent**: Task analysis and synthesis\n- **Code Agent**: File analysis and editing\n- **Documentation Agent**: Documentation generation\n- **Testing Agent**: Test creation and validation\n\n**Features:**\n- ✅ Hidden thinking processes (spinners instead of verbose output)\n- ✅ File system integration via MCP\n- ✅ Multi-agent task coordination\n- ✅ Automatic validation and testing\n\n### 2. **Chat & Response Modes**\n- **chat.js**: Interactive conversation mode\n- **response.js**: Direct API response mode\n\n### 3. **MCP Server** (`mcp-server.js`)\n- File system access for agents\n- RESTful API endpoints\n- Cross-origin support\n\n### 4. **Test Suite** (`test-agent-system.js`)\n- Validates agent functionality\n- File editing tests\n- Orchestration validation\n\n## 🔧 Usage Examples\n\n### File Editing with Agents\n```bash\n# Edit a specific file\nnode agent-orchestrator.js \"Add error handling to server.js\" --file server.js\n\n# Show thinking process\nnode agent-orchestrator.js \"Cr"
    },
    {
      "path": "response.js",
      "size": 2354,
      "mtimeMs": 1755040659244.9392,
      "hash": "eb814fc0790387ae7dead0baca311455b5076958cd2bad3753616367e18432d8",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport chalk from 'chalk';\nimport { createInterface } from 'readline';\n\ndotenv.config();\n\nconst apiKey = process.env.NVIDIA_API_KEY || process.env.api_key;\n\nif (!apiKey) {\n  console.error(chalk.red('❌ Error: NVIDIA_API_KEY or api_key not found in .env file'));\n  console.log(chalk.yellow('💡 Add to .env: NVIDIA_API_KEY=\"your-key-here\"'));\n  process.exit(1);\n}\n\nconst openai = new OpenAI({\n  apiKey: apiKey.replace(/\"/g, '').trim(),\n  baseURL: 'https://integrate.api.nvidia.com/v1',\n});\n\nasync function responseMode() {\n  console.log(chalk.blue.bold('🤖 NVIDIA GPT-OSS-20B Response Mode'));\n  console.log(chalk.gray('Type \"exit\" to quit\\n'));\n  \n  const rl = createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    prompt: chalk.green('You: ')\n  });\n\n  rl.prompt();\n\n  rl.on('line', async (input) => {\n    const message = input.trim();\n    \n    if (message.toLowerCase() === 'exit') {\n      console.log(chalk.yellow('👋 Goodbye!'));\n      rl.close();\n      return;\n    }\n\n    if (!message) {\n      rl.prompt();\n      return;\n    }\n\n    try {\n      console.log(chalk.blue('🤖 Processing...'));\n      \n      const response = await openai.responses.create({\n        model: \"openai/gpt-oss-20b\",\n        input: [message],\n        max_output_tokens: 1024,\n        temperature: 0.7,\n        top_p: 0.9,\n      });\n\n      console.log(chalk.green('AI: ') + response.output_text + '\\n');\n      \n    } catch (error) {\n      console.error(chalk.red('❌ Error:'), error.message);\n    }\n    \n    rl.prompt();\n  });\n\n  rl.on('close', () => {\n    console.log(chalk.yellow('👋 Response session ended.'));\n    process.exit(0);\n  });\n}\n\nasync function singleResponse(message) {\n  try {\n    const response = await openai.responses.create({\n      model: \"openai/gpt-oss-20b\",\n      input: [message],\n      max_output_tokens: 1024,\n      temperature: 0.7,\n      top_p: 0.9,\n    });\n\n    console.log(response.output_text);\n  } catch (error) {\n    console.erro"
    },
    {
      "path": "src\\agents\\expert\\expert-agent-system.js",
      "size": 12538,
      "mtimeMs": 1755040668459.8179,
      "hash": "363d45a82990f81810f23d8065991a994c3c29c6b63ab32d4b9f44fa7cd59624",
      "sample": "#!/usr/bin/env node\n\nimport HyperExpertOrchestrator from './hyper-expert-orchestrator.js';\nimport KnowledgeUpdater from './knowledge-updater.js';\nimport { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass ExpertAgentSystem {\n  constructor() {\n    this.orchestrator = new HyperExpertOrchestrator();\n    this.updater = new KnowledgeUpdater();\n    this.workingDir = process.cwd();\n  }\n\n  async initialize() {\n    console.log(chalk.blue.bold('🚀 Expert AI System - Hyper-Specialized Agents'));\n    console.log(chalk.gray('Initializing with latest knowledge...'));\n    \n    await this.orchestrator.initialize();\n    await this.checkForUpdates();\n  }\n\n  async checkForUpdates() {\n    const spinner = ora('Checking for knowledge updates...').start();\n    try {\n      const updates = await this.updater.checkAllAgents();\n      const totalUpdates = Object.values(updates).reduce((sum, arr) => sum + arr.length, 0);\n      \n      if (totalUpdates > 0) {\n        spinner.succeed(`Found ${totalUpdates} knowledge updates`);\n      } else {\n        spinner.info('All agents are up to date');\n      }\n    } catch (error) {\n      spinner.warn('Could not check updates, using existing knowledge');\n    }\n  }\n\n  async processTask(task, options = {}) {\n    const { \n      agent, \n      file, \n      showThinking = false, \n      includeWebSearch = true,\n      context = {}\n    } = options;\n\n    if (!agent) {\n      throw new Error('Agent type is required');\n    }\n\n    const spinner = ora({\n      text: `Processing with ${this.orchestrator.agents[agent]?.name || agent}...`,\n      hideCursor: false\n    }).start();\n\n    try {\n      // Get agent with latest knowledge\n      const agentInfo = await this.updater.getAgentWithUpdates(agent);\n      \n      if (includeWebSearch && agentInfo.requiresWebSearch) {\n        spinner.text = 'Searching for latest "
    },
    {
      "path": "src\\agents\\expert\\hyper-expert-orchestrator.js",
      "size": 9392,
      "mtimeMs": 1755053980693.0671,
      "hash": "8a1cb3cd382974579b35cc3e9aeee920a70abd37c6749f8d65e01040b2d0247c",
      "sample": "#!/usr/bin/env node\n\nimport { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nfunction findProjectRoot(startDir) {\n  let dir = startDir;\n  while (dir !== path.parse(dir).root) {\n    const pkg = path.join(dir, 'package.json');\n    if (fs.existsSync(pkg)) return dir;\n    dir = path.dirname(dir);\n  }\n  return startDir;\n}\n\nconst projectRoot = findProjectRoot(__dirname);\nconst promptsRoot = path.join(projectRoot, 'prompts');\n\nclass HyperExpertOrchestrator {\n  constructor() {\n    this.agents = {\n      'code-analyzer': {\n        name: 'Code Analyzer',\n        expertise: 'Code quality, bug detection, performance analysis',\n        promptFile: 'agents/code-analyzer.md',\n        lastUpdated: null,\n        requiresWebSearch: false,\n      },\n      'documentation-writer': {\n        name: 'Documentation Writer',\n        expertise: 'Technical documentation, API docs, tutorials',\n        promptFile: 'agents/documentation-writer.md',\n        lastUpdated: null,\n        requiresWebSearch: false,\n      },\n      'bug-fixer': {\n        name: 'Bug Fixer',\n        expertise: 'Debugging, error resolution, troubleshooting',\n        promptFile: 'agents/bug-fixer.md',\n        lastUpdated: null,\n        requiresWebSearch: false,\n      },\n      architect: {\n        name: 'System Architect',\n        expertise: 'System design, architecture decisions, best practices',\n        promptFile: 'agents/architect.md',\n        lastUpdated: null,\n        requiresWebSearch: true,\n      },\n      'security-expert': {\n        name: 'Security Expert',\n        expertise: 'Security analysis, vulnerability assessment, secure coding',\n        promptFile: 'agents/security-expert.md',\n        lastUpdated: null,\n        requiresWebSearch: true,\n      },\n    };\n\n    this.knowledgeBase = {};\n    this.webSearchEnabled = false;\n  }\n\n  async initialize() {\n    con"
    },
    {
      "path": "src\\agents\\expert-system.js",
      "size": 12532,
      "mtimeMs": 1755040854558.0603,
      "hash": "02eefb10a58959054ce1cd19d8037f43df945970b1565867db1f079d5622b514",
      "sample": "#!/usr/bin/env node\n\nimport HyperExpertOrchestrator from './hyper-expert.js';\nimport KnowledgeUpdater from '../utils/knowledge-updater.js';\nimport { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass ExpertAgentSystem {\n  constructor() {\n    this.orchestrator = new HyperExpertOrchestrator();\n    this.updater = new KnowledgeUpdater();\n    this.workingDir = process.cwd();\n  }\n\n  async initialize() {\n    console.log(chalk.blue.bold('🚀 Expert AI System - Hyper-Specialized Agents'));\n    console.log(chalk.gray('Initializing with latest knowledge...'));\n    \n    await this.orchestrator.initialize();\n    await this.checkForUpdates();\n  }\n\n  async checkForUpdates() {\n    const spinner = ora('Checking for knowledge updates...').start();\n    try {\n      const updates = await this.updater.checkAllAgents();\n      const totalUpdates = Object.values(updates).reduce((sum, arr) => sum + arr.length, 0);\n      \n      if (totalUpdates > 0) {\n        spinner.succeed(`Found ${totalUpdates} knowledge updates`);\n      } else {\n        spinner.info('All agents are up to date');\n      }\n    } catch (error) {\n      spinner.warn('Could not check updates, using existing knowledge');\n    }\n  }\n\n  async processTask(task, options = {}) {\n    const { \n      agent, \n      file, \n      showThinking = false, \n      includeWebSearch = true,\n      context = {}\n    } = options;\n\n    if (!agent) {\n      throw new Error('Agent type is required');\n    }\n\n    const spinner = ora({\n      text: `Processing with ${this.orchestrator.agents[agent]?.name || agent}...`,\n      hideCursor: false\n    }).start();\n\n    try {\n      // Get agent with latest knowledge\n      const agentInfo = await this.updater.getAgentWithUpdates(agent);\n      \n      if (includeWebSearch && agentInfo.requiresWebSearch) {\n        spinner.text = 'Searching for latest inform"
    },
    {
      "path": "src\\agents\\hyper-expert.js",
      "size": 9634,
      "mtimeMs": 1755040844353.2722,
      "hash": "997e34cf859ff9e3ee9389c535d4b9ff50cc9f6963047db58ca52e5298787a18",
      "sample": "#!/usr/bin/env node\n\nimport { spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass HyperExpertOrchestrator {\n  constructor() {\n    this.agents = {\n      'code-analyzer': {\n        name: 'Code Analyzer',\n        expertise: 'Code quality, bug detection, performance analysis',\n        promptFile: 'agents/code-analyzer.md',\n        lastUpdated: null,\n        requiresWebSearch: false\n      },\n      'documentation-writer': {\n        name: 'Documentation Writer',\n        expertise: 'Technical documentation, API docs, tutorials',\n        promptFile: 'agents/documentation-writer.md',\n        lastUpdated: null,\n        requiresWebSearch: false\n      },\n      'bug-fixer': {\n        name: 'Bug Fixer',\n        expertise: 'Debugging, error resolution, troubleshooting',\n        promptFile: 'agents/bug-fixer.md',\n        lastUpdated: null,\n        requiresWebSearch: false\n      },\n      'architect': {\n        name: 'System Architect',\n        expertise: 'System design, architecture decisions, best practices',\n        promptFile: 'agents/architect.md',\n        lastUpdated: null,\n        requiresWebSearch: true\n      },\n      'security-expert': {\n        name: 'Security Expert',\n        expertise: 'Security analysis, vulnerability assessment, secure coding',\n        promptFile: 'agents/security-expert.md',\n        lastUpdated: null,\n        requiresWebSearch: true\n      }\n    };\n    \n    this.knowledgeBase = {};\n    this.webSearchEnabled = false;\n  }\n\n  async initialize() {\n    console.log(chalk.blue.bold('🎯 Hyper-Expert AI System'));\n    console.log(chalk.gray('Initializing specialized agents...'));\n    \n    await this.loadAgentPrompts();\n    await this.checkKnowledgeUpdates();\n    \n    console.log(chalk.green('✅ All agents initialized'));\n  }\n\n  async loadAgentPrompts() {\n    for (const [agentId, agent] of Object.e"
    },
    {
      "path": "src\\agents\\orchestrator.js",
      "size": 7768,
      "mtimeMs": 1755043343138.7122,
      "hash": "9954a19aa9e12daa2ef7db5cb2bc09f80550bffcc6082d014f08966c1270c698",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { spawn } from 'child_process';\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\ndotenv.config();\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nclass AgentOrchestrator {\n  constructor() {\n    this.apiKey = process.env.NVIDIA_API_KEY || process.env.api_key;\n    if (!this.apiKey) {\n      throw new Error('NVIDIA_API_KEY or api_key not found in .env');\n    }\n\n    this.openai = new OpenAI({\n      apiKey: this.apiKey.replace(/\"/g, '').trim(),\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n\n    this.agents = {\n      master: {\n        name: 'Master Agent',\n        role: 'Orchestrates tasks and synthesizes responses',\n        prompt: 'You are the master agent. Analyze the user request, break it into sub-tasks, and coordinate with specialized agents. Provide concise final responses.',\n      },\n      code: {\n        name: 'Code Agent',\n        role: 'Analyzes and modifies code files',\n        prompt: 'You are a code analysis agent. Focus on code quality, bugs, and improvements. Provide specific, actionable feedback.',\n      },\n      doc: {\n        name: 'Documentation Agent',\n        role: 'Creates and updates documentation',\n        prompt: 'You are a documentation agent. Create clear, concise documentation for code and systems.',\n      },\n      test: {\n        name: 'Testing Agent',\n        role: 'Creates and runs tests',\n        prompt: 'You are a testing agent. Create comprehensive tests and validate functionality.',\n      }\n    };\n  }\n\n  async dispatchToAgent(agentType, task, context = {}) {\n    const spinner = ora({\n      text: `${this.agents[agentType].name} processing...`,\n      hideCursor: false,\n    }).start();\n\n    try {\n      const prompt = this.buildAgentPrompt(agentType, task, context);\n      const response = await this.callOpenAI(prompt);\n      \n      spinner"
    },
    {
      "path": "src\\commands\\chat.js",
      "size": 4617,
      "mtimeMs": 1755062009789.867,
      "hash": "6469be78561ac3645e98d42d6b98c78d7a03421e6749b464bbed8dd288a0cabe",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport chalk from 'chalk';\nimport { createInterface } from 'readline';\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\nimport { readTaskMemory } from '../utils/task-memory.js';\nimport { getCurrentTaskId } from '../utils/current-task.js';\n\ndotenv.config();\n\nconst apiKey = process.env.NVIDIA_API_KEY || process.env.api_key;\n\nif (!apiKey) {\n  console.error(chalk.red('❌ Error: NVIDIA_API_KEY or api_key not found in .env file'));\n  console.log(chalk.yellow('💡 Add to .env: NVIDIA_API_KEY=\"your-key-here\"'));\n  process.exit(1);\n}\n\nconst openai = new OpenAI({\n  apiKey: apiKey.replace(/\"/g, '').trim(),\n  baseURL: 'https://integrate.api.nvidia.com/v1',\n});\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nfunction runIndexer(taskId) {\n  return new Promise((resolve) => {\n    const args = [join(__dirname, 'index-codebase.js')];\n    if (taskId) args.push('--task', taskId);\n    const child = spawn('node', args, { stdio: 'inherit', shell: true });\n    child.on('close', (code) => resolve(code === 0));\n  });\n}\n\nasync function chatMode() {\n  console.log(chalk.blue.bold('🤖 NVIDIA GPT-OSS-20B Chat Mode'));\n  console.log(chalk.gray('Type \"exit\" to quit\\n'));\n  const currentTaskId = getCurrentTaskId();\n  if (currentTaskId) {\n    const mem = readTaskMemory(currentTaskId, {});\n    console.log(chalk.gray(`Using task: ${currentTaskId} (${mem.fileCount ?? 'n/a'} files indexed)`));\n  }\n  \n  const rl = createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    prompt: chalk.green('You: ')\n  });\n\n  rl.prompt();\n\n  rl.on('line', async (input) => {\n    const message = input.trim();\n    \n    if (message.toLowerCase() === 'exit') {\n      console.log(chalk.yellow('👋 Goodbye!'));\n      rl.close();\n      return;\n    }\n\n    if (!message) {\n      rl.prompt();\n      return;\n    }\n\n    // Tooling shortcuts\n    if (message.startsWith('/index') |"
    },
    {
      "path": "src\\commands\\index-codebase.js",
      "size": 3255,
      "mtimeMs": 1755062041044.5498,
      "hash": "661e84665a2db65a5eb4db4c8e29bf2d815d8f2c08de4cb5b55be7607bb0dc50",
      "sample": "#!/usr/bin/env node\n\nimport { readdirSync, statSync, readFileSync, mkdirSync, writeFileSync, existsSync } from 'fs';\nimport { join, relative } from 'path';\nimport { fileURLToPath } from 'url';\nimport crypto from 'crypto';\nimport chalk from 'chalk';\nimport { writeTaskMemory } from '../utils/task-memory.js';\nimport { setCurrentTaskId } from '../utils/current-task.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = __filename.substring(0, __filename.lastIndexOf('/'));\n\nconst PROJECT_ROOT = process.cwd();\nconst OUT_DIR = join(PROJECT_ROOT, '.AGENT-X', 'index');\n\nconst EXCLUDES = new Set(['node_modules', '.git', '.AGENT-X']);\nconst MAX_BYTES_TO_SAMPLE = 2048; // small snippet sample per file\n\nfunction ensureDir(dir) {\n  if (!existsSync(dir)) mkdirSync(dir, { recursive: true });\n}\n\nfunction hashContent(buf) {\n  const h = crypto.createHash('sha256');\n  h.update(buf);\n  return h.digest('hex');\n}\n\nfunction shouldSkip(path, name) {\n  if (EXCLUDES.has(name)) return true;\n  // skip big binary-like files by extension\n  const lower = name.toLowerCase();\n  const skipExt = ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.ico', '.zip', '.gz', '.tar', '.rar', '.7z', '.pdf', '.dll', '.exe'];\n  return skipExt.some(ext => lower.endsWith(ext));\n}\n\nfunction walk(dir, base) {\n  const entries = [];\n  for (const name of readdirSync(dir)) {\n    if (shouldSkip(dir, name)) continue;\n    const full = join(dir, name);\n    const st = statSync(full);\n    if (st.isDirectory()) {\n      entries.push(...walk(full, base));\n    } else if (st.isFile()) {\n      const rel = relative(base, full);\n      let sample = '';\n      try {\n        const buf = readFileSync(full);\n        sample = buf.slice(0, MAX_BYTES_TO_SAMPLE).toString('utf-8');\n        entries.push({\n          path: rel,\n          size: st.size,\n          mtimeMs: st.mtimeMs,\n          hash: hashContent(buf),\n          sample\n        });\n      } catch {\n        entries.push({ path: rel, size: st.size, mtimeMs: st.mtimeMs, hash: null, sample: '' });\n      }\n    }\n  }\n  return e"
    },
    {
      "path": "src\\commands\\index.js",
      "size": 10316,
      "mtimeMs": 1755015943149.944,
      "hash": "8c7bd141edde6d00390438005d313473346e87fae0c8e096924b51c99138bb05",
      "sample": "#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { glob } from 'glob';\nimport ora from 'ora';\nimport dotenv from 'dotenv';\nimport OpenAI from 'openai';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndotenv.config();\n\nclass NvidiaGPTCLI {\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.api_key?.replace(/\"/g, '').trim(),\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n    this.program = new Command();\n    this.setupCommands();\n  }\n\n  setupCommands() {\n    this.program\n      .name('nvidia-gpt')\n      .description('CLI tool for NVIDIA GPT-OSS-20B API with file operations')\n      .version('1.0.0');\n\n    this.program\n      .command('chat')\n      .description('Start an interactive chat session')\n      .action(() => this.startChat());\n\n    this.program\n      .command('ask <question>')\n      .description('Ask a single question')\n      .option('-f, --file <path>', 'Include file content in the question')\n      .action((question, options) => this.askQuestion(question, options));\n\n    this.program\n      .command('files')\n      .description('List and manage files')\n      .option('-l, --list [pattern]', 'List files matching pattern', '*.js,*.md,*.json,*.py,*.txt')\n      .option('-r, --read <path>', 'Read a file')\n      .option('-e, --edit <path>', 'Edit a file')\n      .option('-d, --delete <path>', 'Delete a file')\n      .action((options) => this.manageFiles(options));\n\n    this.program\n      .command('mcp')\n      .description('MCP (Model Context Protocol) operations')\n      .option('-c, --context <path>', 'Add file/directory to context')\n      .option('-r, --read-context', 'Read current context')\n      .action((options) => this.handleMCP(options));\n\n    this.program\n      .command('config')\n      .description('Show current configuration')\n      .action(() => this.showConfig()"
    },
    {
      "path": "src\\commands\\ink-interface.jsx",
      "size": 5218,
      "mtimeMs": 1755061460588.5803,
      "hash": "3758fa90f32116e553be2c2445064c31cb08117f517c10c2f62cfa08ee251434",
      "sample": "#!/usr/bin/env node\n\nimport React, { useState, useEffect } from 'react';\nimport { render, Box, Text, useInput, useApp, Newline, Spacer } from 'ink';\nimport chalk from 'chalk';\nimport { Header } from '../ui/header.js';\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst MenuOption = ({ isSelected, children, description }) => (\n  <Box flexDirection=\"row\" marginBottom={1}>\n    <Text color={isSelected ? '#00ff88' : 'white'}>{isSelected ? '❯ ' : '  '}</Text>\n    <Text bold color={isSelected ? '#00ff88' : 'white'}>{children}</Text>\n    <Text color=\"#888888\" marginLeft={2}>\n      {description}\n    </Text>\n  </Box>\n);\n\nconst StatusBar = ({ message, isError = false }) => (\n  <Box marginTop={1} borderStyle=\"round\" borderColor={isError ? 'red' : 'green'} paddingX={1}>\n    <Text color={isError ? 'red' : 'green'}>{message}</Text>\n  </Box>\n);\n\nconst App = () => {\n  const { exit } = useApp();\n  const [selectedOption, setSelectedOption] = useState(0);\n  const [status, setStatus] = useState({ message: '', isError: false });\n  const [isLoading, setIsLoading] = useState(false);\n  const [showHeader, setShowHeader] = useState(true);\n\n  const menuOptions = [\n    { \n      name: 'Chat Mode', \n      description: 'Interactive conversation with AI',\n      command: 'chat',\n      args: []\n    },\n    { \n      name: 'Response Mode', \n      description: 'Get direct AI responses',\n      command: 'response',\n      args: []\n    },\n    { \n      name: 'Agent Orchestrator', \n      description: 'Multi-agent task processing',\n      command: 'agent',\n      args: []\n    },\n    { \n      name: 'Expert Agents', \n      description: 'Specialized AI experts',\n      command: 'expert',\n      args: []\n    },\n    { \n      name: 'Test System', \n      description: 'Run validation tests',\n      command: 'test',\n      args: []\n    },\n    { \n      name: 'Update Knowledge', \n      description: 'Refresh expert knowledge"
    },
    {
      "path": "src\\commands\\menu.js",
      "size": 5077,
      "mtimeMs": 1755062191392.6658,
      "hash": "2f1f3e51f3620ebd5203c16eba44dab919e783c0c08c8ea462744c9183a8af86",
      "sample": "#!/usr/bin/env node\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst BANNER_BLOCK = String.raw`\n █████╗   ██████╗ ███████╗███╗   ██╗████████╗██╗  ██╗\n██╔══██╗ ██╔════╝ ██╔════╝████╗  ██║╚══██╔══╝██║  ██║\n███████║ ██║  ███╗█████╗  ██╔██╗ ██║   ██║   ███████║\n██╔══██║ ██║   ██║██╔══╝  ██║╚██╗██║   ██║   ██╔══██║\n██║  ██║ ╚██████╔╝███████╗██║ ╚████║   ██║   ██║  ██║\n╚═╝  ╚═╝  ╚═════╝ ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝\n                  ██╗  ██╗\n                   ╚██╗██╔╝\n                    ╚███╔╝ \n                    ██╔██╗ \n                   ██╔╝ ██╗\n                   ╚═╝  ╚═╝\n`;\n\nconst displayHeader = () => {\n  console.log(chalk.hex(\"#00ff88\")(BANNER_BLOCK));\n  console.log(chalk.hex(\"#ffaa00\").bold(\"🚀 AGENT-X v0.0.1 (alpha)\"));\n  console.log(chalk.hex(\"#888888\")(\"Powered by NVIDIA GPT-OSS-20B\"));\n  console.log(chalk.hex(\"#444444\")(\"──────────────────────────────────────────────────────────────\"));\n  console.log();\n};\n\nconst menuOptions = [\n  { name: '🗣️  Chat Mode', description: 'Interactive conversation with AI', action: 'chat' },\n  { name: '🤖 Response Mode', description: 'Direct respons"
    },
    {
      "path": "src\\commands\\response.js",
      "size": 2354,
      "mtimeMs": 1755038083548.9,
      "hash": "eb814fc0790387ae7dead0baca311455b5076958cd2bad3753616367e18432d8",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport chalk from 'chalk';\nimport { createInterface } from 'readline';\n\ndotenv.config();\n\nconst apiKey = process.env.NVIDIA_API_KEY || process.env.api_key;\n\nif (!apiKey) {\n  console.error(chalk.red('❌ Error: NVIDIA_API_KEY or api_key not found in .env file'));\n  console.log(chalk.yellow('💡 Add to .env: NVIDIA_API_KEY=\"your-key-here\"'));\n  process.exit(1);\n}\n\nconst openai = new OpenAI({\n  apiKey: apiKey.replace(/\"/g, '').trim(),\n  baseURL: 'https://integrate.api.nvidia.com/v1',\n});\n\nasync function responseMode() {\n  console.log(chalk.blue.bold('🤖 NVIDIA GPT-OSS-20B Response Mode'));\n  console.log(chalk.gray('Type \"exit\" to quit\\n'));\n  \n  const rl = createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    prompt: chalk.green('You: ')\n  });\n\n  rl.prompt();\n\n  rl.on('line', async (input) => {\n    const message = input.trim();\n    \n    if (message.toLowerCase() === 'exit') {\n      console.log(chalk.yellow('👋 Goodbye!'));\n      rl.close();\n      return;\n    }\n\n    if (!message) {\n      rl.prompt();\n      return;\n    }\n\n    try {\n      console.log(chalk.blue('🤖 Processing...'));\n      \n      const response = await openai.responses.create({\n        model: \"openai/gpt-oss-20b\",\n        input: [message],\n        max_output_tokens: 1024,\n        temperature: 0.7,\n        top_p: 0.9,\n      });\n\n      console.log(chalk.green('AI: ') + response.output_text + '\\n');\n      \n    } catch (error) {\n      console.error(chalk.red('❌ Error:'), error.message);\n    }\n    \n    rl.prompt();\n  });\n\n  rl.on('close', () => {\n    console.log(chalk.yellow('👋 Response session ended.'));\n    process.exit(0);\n  });\n}\n\nasync function singleResponse(message) {\n  try {\n    const response = await openai.responses.create({\n      model: \"openai/gpt-oss-20b\",\n      input: [message],\n      max_output_tokens: 1024,\n      temperature: 0.7,\n      top_p: 0.9,\n    });\n\n    console.log(response.output_text);\n  } catch (error) {\n    console.erro"
    },
    {
      "path": "src\\commands\\setup-task.js",
      "size": 4387,
      "mtimeMs": 1755062431696.5903,
      "hash": "148ff260abaaec6c9763a51b4e1e21e751a1a650487b70b6556bf5519d5bdaa9",
      "sample": "#!/usr/bin/env node\n\nimport inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { setCurrentTaskId } from '../utils/current-task.js';\nimport { writeTaskMemory } from '../utils/task-memory.js';\nimport { spawn } from 'child_process';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nfunction runIndexer(taskId) {\n  return new Promise((resolve) => {\n    const args = [join(__dirname, 'index-codebase.js'), '--task', taskId];\n    const child = spawn('node', args, { stdio: 'inherit', shell: true });\n    child.on('close', (code) => resolve(code === 0));\n  });\n}\n\nasync function main() {\n  console.log(chalk.cyan('\\nSetup a new agent task'));\n\n  const answers = await inquirer.prompt([\n    {\n      type: 'input',\n      name: 'taskId',\n      message: 'Task ID (leave blank to auto-generate):',\n      filter: (v) => v.trim(),\n    },\n    {\n      type: 'input',\n      name: 'title',\n      message: 'Task title/goal:',\n      validate: (v) => !!v.trim() || 'Please enter a title',\n    },\n    // Offer editor only if EDITOR/VISUAL is configured\n    ...(process.env.EDITOR || process.env.VISUAL ? [{\n      type: 'confirm',\n      name: 'useEditor',\n      message: 'Open your editor to write a longer description?',\n      default: true\n    }] : [{\n      type: 'confirm',\n      name: 'useEditor',\n      message: 'Open an external editor for description? (No = inline input)',\n      default: false\n    }]),\n    {\n      type: 'editor',\n      name: 'descriptionEditor',\n      message: 'Describe the task (your editor will open):',\n      default: 'Describe the objective, constraints, and success criteria.',\n      when: (a) => !!a.useEditor\n    },\n    {\n      type: 'input',\n      name: 'descriptionInline',\n      message: 'Describe the task (inline):',\n      default: 'Describe the objective, constraints, and success criteria.',\n      when: (a) => !a.useEditor,\n      filter: (v) => v.trim()\n    },\n    {\n      type: 'list',\n      name: 'a"
    },
    {
      "path": "src\\core\\agent.js",
      "size": 18586,
      "mtimeMs": 1755034152536.43,
      "hash": "a00667627ccd8d63a343e24954e95e3bed6e99d1d0eafdb6e97029d0193634bb",
      "sample": "#!/usr/bin/env node\n\nimport OpenAI from 'openai';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { spawn } from 'child_process';\nimport { WebSocket } from 'ws';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndotenv.config();\n\nclass AIAgent {\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.api_key?.replace(/\"/g, '').trim(),\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n    this.tools = this.getAvailableTools();\n    this.conversation = [];\n  }\n\n  getAvailableTools() {\n    return [\n      {\n        type: 'function',\n        function: {\n          name: 'scan_directory',\n          description: 'Scan a directory and return file structure with metadata',\n          parameters: {\n            type: 'object',\n            properties: {\n              path: { type: 'string', description: 'Directory path to scan' },\n              pattern: { type: 'string', description: 'File pattern to match (optional)' },\n              maxDepth: { type: 'number', description: 'Maximum depth to scan (optional)' }\n            },\n            required: ['path']\n          }\n        }\n      },\n      {\n        type: 'function',\n        function: {\n          name: 'read_file',\n          description: 'Read and return the contents of a file',\n          parameters: {\n            type: 'object',\n            properties: {\n              path: { type: 'string', description: 'File path to read' },\n              lineStart: { type: 'number', description: 'Start line number (optional)' },\n              lineEnd: { type: 'number', description: 'End line number (optional)' }\n            },\n            required: ['path']\n          }\n        }\n      },\n      {\n        type: 'function',\n        function: {\n          name: 'write_file',\n          description: 'Write content to a file (creates directories if needed)',\n          parameters: {\n            "
    },
    {
      "path": "src\\core\\api\\nvidia.js",
      "size": 1518,
      "mtimeMs": 1755053625979.2688,
      "hash": "547d3f3184e86ac4207c90b6fea4b195bc111185bf580a3ca0e45eeb8da633f5",
      "sample": "import OpenAI from 'openai';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst MODEL_MAP = {\n  '20b': 'openai/gpt-oss-20b',\n  '120b': 'openai/gpt-oss-120b'\n};\n\nexport class NvidiaClient {\n  constructor({ apiKey, baseURL = 'https://integrate.api.nvidia.com/v1', model = '20b' } = {}) {\n    const envKey = process.env.NVIDIA_API_KEY || process.env.api_key;\n    const key = (apiKey || envKey || '').replace(/\"/g, '').trim();\n    if (!key) throw new Error('NVIDIA_API_KEY or api_key not set in environment');\n\n    this.model = MODEL_MAP[`${model}`.toLowerCase()] || MODEL_MAP['20b'];\n    this.openai = new OpenAI({ apiKey: key, baseURL });\n  }\n\n  setModel(model) {\n    const mapped = MODEL_MAP[`${model}`.toLowerCase()];\n    if (mapped) this.model = mapped;\n    return this.model;\n  }\n\n  async chat(messages, opts = {}) {\n    const { temperature = 0.7, top_p = 0.9, max_tokens = 1024 } = opts;\n    const completion = await this.openai.chat.completions.create({\n      model: this.model,\n      messages,\n      temperature,\n      top_p,\n      max_tokens,\n    });\n    return completion?.choices?.[0]?.message?.content ?? '';\n  }\n\n  async respond(input, opts = {}) {\n    const { temperature = 0.7, top_p = 0.9, max_output_tokens = 1024 } = opts;\n    const response = await this.openai.responses.create({\n      model: this.model,\n      input: Array.isArray(input) ? input : [input],\n      temperature,\n      top_p,\n      max_output_tokens,\n    });\n    return response?.output_text ?? '';\n  }\n}\n\nexport default NvidiaClient;\n"
    },
    {
      "path": "src\\core\\mcp\\mcp-server.js",
      "size": 2882,
      "mtimeMs": 1755038676410.0317,
      "hash": "5bf974ca8efec1375b3c9428cc51d90eb379871ae44c6f6f1e68074a0e538097",
      "sample": "#!/usr/bin/env node\n\nimport { createServer } from 'http';\nimport { readFileSync, writeFileSync, existsSync, readdirSync, statSync } from 'fs';\nimport { join, resolve } from 'path';\n\nclass MCPServer {\n  constructor(port = 3001) {\n    this.port = port;\n    this.server = null;\n  }\n\n  start() {\n    this.server = createServer((req, res) => {\n      res.setHeader('Access-Control-Allow-Origin', '*');\n      res.setHeader('Content-Type', 'application/json');\n\n      if (req.method === 'GET' && req.url === '/health') {\n        res.writeHead(200);\n        res.end(JSON.stringify({ status: 'ok', timestamp: new Date().toISOString() }));\n        return;\n      }\n\n      if (req.method === 'POST' && req.url === '/api/files') {\n        let body = '';\n        req.on('data', chunk => body += chunk);\n        req.on('end', () => {\n          try {\n            const { action, path, content } = JSON.parse(body);\n            const result = this.handleFileOperation(action, path, content);\n            res.writeHead(200);\n            res.end(JSON.stringify(result));\n          } catch (error) {\n            res.writeHead(400);\n            res.end(JSON.stringify({ error: error.message }));\n          }\n        });\n        return;\n      }\n\n      res.writeHead(404);\n      res.end(JSON.stringify({ error: 'Not found' }));\n    });\n\n    this.server.listen(this.port, () => {\n      console.log(`MCP Server running on http://localhost:${this.port}`);\n    });\n  }\n\n  handleFileOperation(action, filePath, content) {\n    const fullPath = resolve(filePath);\n\n    switch (action) {\n      case 'read':\n        if (!existsSync(fullPath)) {\n          throw new Error(`File not found: ${fullPath}`);\n        }\n        return {\n          content: readFileSync(fullPath, 'utf8'),\n          size: statSync(fullPath).size,\n          modified: statSync(fullPath).mtime\n        };\n\n      case 'write':\n        writeFileSync(fullPath, content);\n        return { success: true, message: 'File written successfully' };\n\n      case 'list':\n        const items = readdirSync(fullPath).map("
    },
    {
      "path": "src\\core\\orchestrators\\agent-orchestrator.js",
      "size": 7056,
      "mtimeMs": 1755054188937.7097,
      "hash": "fd480457b540dc9ee060e786d418558b13e7c2035901079638db18069b6c058a",
      "sample": "#!/usr/bin/env node\n\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport dotenv from 'dotenv';\nimport NvidiaClient from '../api/nvidia.js';\n\ndotenv.config();\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nclass AgentOrchestrator {\n  constructor({ model = '20b' } = {}) {\n    this.client = new NvidiaClient({ model });\n\n    this.agents = {\n      master: {\n        name: 'Master Agent',\n        role: 'Orchestrates tasks and synthesizes responses',\n        prompt: 'You are the master agent. Analyze the user request, break it into sub-tasks, and coordinate with specialized agents. Provide concise final responses.',\n      },\n      code: {\n        name: 'Code Agent',\n        role: 'Analyzes and modifies code files',\n        prompt: 'You are a code analysis agent. Focus on code quality, bugs, and improvements. Provide specific, actionable feedback.',\n      },\n      doc: {\n        name: 'Documentation Agent',\n        role: 'Creates and updates documentation',\n        prompt: 'You are a documentation agent. Create clear, concise documentation for code and systems.',\n      },\n      test: {\n        name: 'Testing Agent',\n        role: 'Creates and runs tests',\n        prompt: 'You are a testing agent. Create comprehensive tests and validate functionality.',\n      },\n    };\n  }\n\n  async dispatchToAgent(agentType, task, context = {}) {\n    const spinner = ora({ text: `${this.agents[agentType].name} processing...`, hideCursor: false }).start();\n\n    try {\n      const prompt = this.buildAgentPrompt(agentType, task, context);\n      const response = await this.callModel(prompt);\n      spinner.succeed(`${this.agents[agentType].name} completed`);\n      return { agent: agentType, response, timestamp: new Date().toISOString() };\n    } catch (error) {\n      spinner.fail(`${this.agents[agentType].name} failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async callModel(prompt) {\n    "
    },
    {
      "path": "src\\knowledge\\knowledge\\architect-updates.json",
      "size": 479,
      "mtimeMs": 1755062147634.3809,
      "hash": "2c5616c2deca1c487714d0683c1cc1ee980d113955d55fbcf6d1b0b0d4cae396",
      "sample": "[\n  {\n    \"title\": \"Next.js 14.2 App Router Best Practices\",\n    \"url\": \"https://nextjs.org/docs/app/building-your-application\",\n    \"date\": \"2024-04-20\",\n    \"summary\": \"Latest architectural patterns for Next.js applications\"\n  },\n  {\n    \"title\": \"Microservices vs Monolith 2024 Analysis\",\n    \"url\": \"https://martinfowler.com/articles/microservices-tradeoffs-2024.html\",\n    \"date\": \"2024-02-10\",\n    \"summary\": \"Updated analysis on microservices architecture decisions\"\n  }\n]"
    },
    {
      "path": "src\\knowledge\\knowledge\\code-analyzer-updates.json",
      "size": 492,
      "mtimeMs": 1755062147625.3655,
      "hash": "741be16241b42d3145960e864a8a393ca5ba6b94fc42d742379d4bb9ab51f529",
      "sample": "[\n  {\n    \"title\": \"ESLint 9.0 Released - New Rules and Breaking Changes\",\n    \"url\": \"https://eslint.org/blog/2024/01/eslint-v9.0.0-released/\",\n    \"date\": \"2024-01-15\",\n    \"summary\": \"Major release with new rules and configuration format\"\n  },\n  {\n    \"title\": \"TypeScript 5.4 Performance Improvements\",\n    \"url\": \"https://devblogs.microsoft.com/typescript/announcing-typescript-5-4/\",\n    \"date\": \"2024-03-05\",\n    \"summary\": \"Significant performance improvements in type checking\"\n  }\n]"
    },
    {
      "path": "src\\knowledge\\knowledge\\last-update.json",
      "size": 46,
      "mtimeMs": 1755062147642.1807,
      "hash": "5cc419c080233a0f486acc2901c68139e06d8cad5a22e455e19085a39ee877fc",
      "sample": "{\n  \"lastUpdate\": \"2025-08-13T05:15:47.640Z\"\n}"
    },
    {
      "path": "src\\knowledge\\knowledge\\security-expert-updates.json",
      "size": 436,
      "mtimeMs": 1755062147638.5967,
      "hash": "3946ae41335c7325ba49e45fa97e5a943d29cdd6ef49d4a2970aefdca7206544",
      "sample": "[\n  {\n    \"title\": \"CVE-2024-1234: Critical Node.js Vulnerability\",\n    \"url\": \"https://nodejs.org/en/blog/vulnerability/cve-2024-1234\",\n    \"date\": \"2024-03-15\",\n    \"summary\": \"Critical vulnerability affecting Node.js 18.x and 20.x\"\n  },\n  {\n    \"title\": \"OWASP Top 10 2024 Update\",\n    \"url\": \"https://owasp.org/www-project-top-ten/2024/\",\n    \"date\": \"2024-01-30\",\n    \"summary\": \"Updated OWASP Top 10 security risks for 2024\"\n  }\n]"
    },
    {
      "path": "src\\knowledge\\knowledge-updater.js",
      "size": 10854,
      "mtimeMs": 1755040679446.0796,
      "hash": "501430ad19a7732170490d5c54a98eec8143637e1986b9384b07ed1353c43fda",
      "sample": "#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass KnowledgeUpdater {\n  constructor() {\n    this.knowledgeDir = path.join(__dirname, 'knowledge');\n    this.promptsDir = path.join(__dirname, 'prompts');\n    this.agents = [\n      'code-analyzer',\n      'documentation-writer', \n      'bug-fixer',\n      'architect',\n      'security-expert'\n    ];\n    \n    this.lastUpdateFile = path.join(this.knowledgeDir, 'last-update.json');\n    this.ensureDirectories();\n  }\n\n  ensureDirectories() {\n    if (!fs.existsSync(this.knowledgeDir)) {\n      fs.mkdirSync(this.knowledgeDir, { recursive: true });\n    }\n  }\n\n  async searchWeb(query, agentType) {\n    console.log(chalk.cyan(`🔍 Searching web for ${agentType}: ${query}`));\n    \n    // Simulate web search - in production, integrate with search APIs\n    const mockResults = {\n      'code-analyzer': [\n        {\n          title: \"ESLint 9.0 Released - New Rules and Breaking Changes\",\n          url: \"https://eslint.org/blog/2024/01/eslint-v9.0.0-released/\",\n          date: \"2024-01-15\",\n          summary: \"Major release with new rules and configuration format\"\n        },\n        {\n          title: \"TypeScript 5.4 Performance Improvements\",\n          url: \"https://devblogs.microsoft.com/typescript/announcing-typescript-5-4/\",\n          date: \"2024-03-05\",\n          summary: \"Significant performance improvements in type checking\"\n        }\n      ],\n      'architect': [\n        {\n          title: \"Next.js 14.2 App Router Best Practices\",\n          url: \"https://nextjs.org/docs/app/building-your-application\",\n          date: \"2024-04-20\",\n          summary: \"Latest architectural patterns for Next.js applications\"\n        },\n        {\n          title: \"Microservices vs Monolith 2024 Analysis\",\n          url: \"https://martinfowler.com/articles/microservices-tradeoffs-2024.html\",\n         "
    },
    {
      "path": "src\\knowledge\\knowledge-updates.js",
      "size": 268,
      "mtimeMs": 1755041009050.5269,
      "hash": "be7968d19dcd72e0214cad952e315231d69e8bd347ec34efc5785677fa76cdd8",
      "sample": "#!/usr/bin/env node\n\nimport KnowledgeUpdater from './knowledge-updater.js';\n\nasync function main() {\n  console.log('🔄 Starting knowledge update process...');\n  const updater = new KnowledgeUpdater();\n  await updater.checkAllAgents();\n}\n\nmain().catch(console.error);"
    },
    {
      "path": "src\\scripts\\test-agent-system.js",
      "size": 3473,
      "mtimeMs": 1755062174302.8625,
      "hash": "76049c108508fda854fda7281ce2b906cefdd69252c94e8d7df946f60d1cdf3e",
      "sample": "#!/usr/bin/env node\n\nimport { writeFileSync, readFileSync, unlinkSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport AgentOrchestrator from '../core/orchestrators/agent-orchestrator.js';\n\nclass AgentSystemTester {\n  constructor() {\n    this.testResults = [];\n    this.orchestrator = new AgentOrchestrator();\n  }\n\n  async runTest(name, testFunction) {\n    console.log(`🧪 Running: ${name}`);\n    try {\n      const result = await testFunction();\n      this.testResults.push({ name, passed: true, result });\n      console.log(`✅ PASSED: ${name}`);\n      return result;\n    } catch (error) {\n      this.testResults.push({ name, passed: false, error: error.message });\n      console.log(`❌ FAILED: ${name} - ${error.message}`);\n      return null;\n    }\n  }\n\n  async testFileEditing() {\n    const testFile = 'test-file.js';\n    const originalContent = `function greet(name) {\n  return \"Hello \" + name;\n}\n\nconsole.log(greet(\"World\"));`;\n\n    writeFileSync(testFile, originalContent);\n\n    try {\n      const result = await this.orchestrator.editFile(testFile, \n        \"Add error handling and improve the greet function to handle null/undefined names\"\n      );\n\n      const updatedContent = readFileSync(testFile, 'utf8');\n      \n      // Validate the edit\n      const hasErrorHandling = updatedContent.includes('null') || updatedContent.includes('undefined');\n      const hasImprovedGreet = updatedContent.includes('greet');\n\n      if (hasErrorHandling && hasImprovedGreet) {\n        return { success: true, updatedContent };\n      } else {\n        throw new Error('File edit validation failed');\n      }\n    } finally {\n      if (existsSync(testFile)) {\n        unlinkSync(testFile);\n      }\n    }\n  }\n\n  async testAgentDispatch() {\n    const result = await this.orchestrator.dispatchToAgent('code', \n      'Analyze this simple function: function add(a, b) { return a + b; }'\n    );\n    \n    return result.response.includes('add') || result.response.includes('function');\n  }\n\n  async testOrchestration() {\n    const result = await th"
    },
    {
      "path": "src\\scripts\\verify-nvidia-setup.js",
      "size": 2428,
      "mtimeMs": 1755035930889.0579,
      "hash": "f43334fdf79551e319aa09cd342cfb9d85938202395781b1e42148ecb2e85f4c",
      "sample": "#!/usr/bin/env node\nimport OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport chalk from 'chalk';\n\ndotenv.config();\n\nasync function verifyNvidiaSetup() {\n  console.log(chalk.blue.bold('🔍 NVIDIA GPT-OSS-20B API Setup Verification\\n'));\n\n  // Check environment\n  const apiKey = process.env.api_key || process.env.NVIDIA_API_KEY;\n  \n  if (!apiKey) {\n    console.log(chalk.red('❌ API Key Missing'));\n    console.log(chalk.yellow('Please set your API key in .env file:'));\n    console.log(chalk.cyan('echo \"api_key=your_nvidia_api_key_here\" > .env'));\n    process.exit(1);\n  }\n\n  console.log(chalk.green('✅ API Key Found'));\n  console.log(chalk.gray(`Base URL: https://integrate.api.nvidia.com/v1`));\n  console.log(chalk.gray(`Model: openai/gpt-oss-20b\\n`));\n\n  try {\n    const openai = new OpenAI({\n      apiKey: apiKey,\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n    });\n\n    console.log(chalk.blue('🚀 Testing API connection...'));\n    \n    const response = await openai.chat.completions.create({\n      model: \"openai/gpt-oss-20b\",\n      messages: [{ role: \"user\", content: \"Hello! Please respond with: 'NVIDIA GPT-OSS-20B is working correctly!'\" }],\n      max_tokens: 50,\n      temperature: 0.1\n    });\n\n    const result = response.choices[0]?.message?.content?.trim();\n    \n    if (result && result.toLowerCase().includes('working')) {\n      console.log(chalk.green('✅ API Test Successful!'));\n      console.log(chalk.gray('Response:'), result);\n      console.log(chalk.green('\\n🎉 Your NVIDIA GPT-OSS-20B setup is ready!'));\n      console.log(chalk.blue('You can now use:'));\n      console.log(chalk.cyan('  node api-chat-nvidia-oss20b.md'));\n      console.log(chalk.cyan('  node api-response-nvidia-oss20b.md'));\n      console.log(chalk.cyan('  npm start'));\n    } else {\n      console.log(chalk.yellow('⚠️  Unexpected response from API'));\n      console.log(chalk.gray('Response:'), result);\n    }\n\n  } catch (error) {\n    if (error.message.includes('401')) {\n      console.log(chalk.red('❌ Authentication Fa"
    },
    {
      "path": "src\\ui\\header.js",
      "size": 3874,
      "mtimeMs": 1755043582343.9202,
      "hash": "953a34adf0120fa536afae58f7775f1d6db1cf9ac2d2268342025871ed0e872f",
      "sample": "import React from 'react';\r\nimport { render, Box, Text, Newline } from 'ink';\r\nimport chalk from 'chalk';\r\n\r\n// ASCII Art Header for AGENT-X - Agent Everything\r\nconst AGENTE_ASCII = `\r\n    ╔═════════════════════════════════════════════════════════════════════╗\r\n    ║                                                                     ║\r\n    ║   █████╗   ██████╗  ███████╗ ███╗   ██╗ ████████╗       ███████╗    ║\r\n    ║  ██╔══██╗ ██╔═════╗ ██╔════╝ ████╗  ██║ ╚══██╔══╝       ██╔════╝    ║\r\n    ║  ███████║ ██║ ████║ █████╗   ██╔██╗ ██║    ██║   ████   █████╗      ║\r\n    ║  ██╔══██║ ██║   ██║ ██╔══╝   ██║╚██╗██║    ██║          ██╔══╝      ║\r\n    ║  ██║  ██║ ╚██████╔╝ ███████╗ ██║ ╚████║    ██║          ███████╗    ║\r\n    ║  ╚═╝  ╚═╝  ╚═════╝  ╚══════╝ ╚═╝  ╚═══╝    ╚═╝          ╚══════╝    ║\r\n    ║                                                                     ║\r\n    ╚═════════════════════════════════════════════════════════════════════╝\r\n`;\r\n\r\n// Version and system info\r\nconst SYSTEM_INFO = {\r\n    version: '0.0.1',\r\n    build: 'alpha',\r\n    poweredBy: 'NVIDIA GPT-OSS-20B',\r\n    environment: 'CLI Tool'\r\n};\r\n\r\n// Header Component\r\nconst Header = ({ showSystemInfo = true }) => {\r\n    return "
    },
    {
      "path": "src\\utils\\current-task.js",
      "size": 815,
      "mtimeMs": 1755062027332.6167,
      "hash": "adb3f7954b666246f512e1174bb093a919db74c03be4fa91ef8eabdd8a5b3e0c",
      "sample": "#!/usr/bin/env node\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\nconst STATE_DIR = join(process.cwd(), '.AGENT-X');\nconst STATE_FILE = join(STATE_DIR, 'current-task.json');\n\nfunction ensureDir() {\n  if (!existsSync(STATE_DIR)) mkdirSync(STATE_DIR, { recursive: true });\n}\n\nexport function setCurrentTaskId(taskId) {\n  ensureDir();\n  const data = { taskId, setAt: new Date().toISOString() };\n  writeFileSync(STATE_FILE, JSON.stringify(data, null, 2), 'utf-8');\n  return data;\n}\n\nexport function getCurrentTaskId() {\n  try {\n    if (!existsSync(STATE_FILE)) return null;\n    const data = JSON.parse(readFileSync(STATE_FILE, 'utf-8'));\n    return data.taskId || null;\n  } catch {\n    return null;\n  }\n}\n\nexport default { setCurrentTaskId, getCurrentTaskId };\n"
    },
    {
      "path": "src\\utils\\knowledge-updater.js",
      "size": 10878,
      "mtimeMs": 1755040866832.1516,
      "hash": "77bbe045d650e4369d8a649aa45c4fd0e22451be112f4dc11aa5ed48a4bcad1b",
      "sample": "#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass KnowledgeUpdater {\n  constructor() {\n    this.knowledgeDir = path.join(__dirname, '..', '..', 'knowledge');\n    this.promptsDir = path.join(__dirname, '..', '..', 'prompts');\n    this.agents = [\n      'code-analyzer',\n      'documentation-writer', \n      'bug-fixer',\n      'architect',\n      'security-expert'\n    ];\n    \n    this.lastUpdateFile = path.join(this.knowledgeDir, 'last-update.json');\n    this.ensureDirectories();\n  }\n\n  ensureDirectories() {\n    if (!fs.existsSync(this.knowledgeDir)) {\n      fs.mkdirSync(this.knowledgeDir, { recursive: true });\n    }\n  }\n\n  async searchWeb(query, agentType) {\n    console.log(chalk.cyan(`🔍 Searching web for ${agentType}: ${query}`));\n    \n    // Simulate web search - in production, integrate with search APIs\n    const mockResults = {\n      'code-analyzer': [\n        {\n          title: \"ESLint 9.0 Released - New Rules and Breaking Changes\",\n          url: \"https://eslint.org/blog/2024/01/eslint-v9.0.0-released/\",\n          date: \"2024-01-15\",\n          summary: \"Major release with new rules and configuration format\"\n        },\n        {\n          title: \"TypeScript 5.4 Performance Improvements\",\n          url: \"https://devblogs.microsoft.com/typescript/announcing-typescript-5-4/\",\n          date: \"2024-03-05\",\n          summary: \"Significant performance improvements in type checking\"\n        }\n      ],\n      'architect': [\n        {\n          title: \"Next.js 14.2 App Router Best Practices\",\n          url: \"https://nextjs.org/docs/app/building-your-application\",\n          date: \"2024-04-20\",\n          summary: \"Latest architectural patterns for Next.js applications\"\n        },\n        {\n          title: \"Microservices vs Monolith 2024 Analysis\",\n          url: \"https://martinfowler.com/articles/microservices-tradeof"
    },
    {
      "path": "src\\utils\\knowledge-updates.js",
      "size": 268,
      "mtimeMs": 1755039322162.494,
      "hash": "be7968d19dcd72e0214cad952e315231d69e8bd347ec34efc5785677fa76cdd8",
      "sample": "#!/usr/bin/env node\n\nimport KnowledgeUpdater from './knowledge-updater.js';\n\nasync function main() {\n  console.log('🔄 Starting knowledge update process...');\n  const updater = new KnowledgeUpdater();\n  await updater.checkAllAgents();\n}\n\nmain().catch(console.error);"
    },
    {
      "path": "src\\utils\\settings-manager.js",
      "size": 3693,
      "mtimeMs": 1755034682475.7866,
      "hash": "f90adb560f02884e8ea7618980fd55e2a55f6e9a8a7c138703a773b111927f92",
      "sample": "import fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass SettingsManager {\n  constructor() {\n    this.settingsPath = path.join(process.cwd(), '.agentx-settings.json');\n    this.defaultSettings = {\n      api: {\n        provider: 'nvidia',\n        model: 'openai/gpt-oss-20b',\n        baseURL: 'https://integrate.api.nvidia.com/v1',\n        maxTokens: 2000,\n        temperature: 0.7\n      },\n      ui: {\n        theme: 'dark',\n        language: 'en',\n        animations: true,\n        sound: false\n      },\n      agents: {\n        defaultTimeout: 30000,\n        maxRetries: 3,\n        parallelProcessing: true\n      },\n      files: {\n        autoBackup: true,\n        backupDir: '.agentx-backups',\n        maxFileSize: 1024 * 1024 * 10 // 10MB\n      },\n      logging: {\n        level: 'info',\n        saveLogs: true,\n        logDir: '.agentx-logs'\n      }\n    };\n    this.settings = { ...this.defaultSettings };\n    this.load();\n  }\n\n  async load() {\n    try {\n      if (await fs.pathExists(this.settingsPath)) {\n        const loaded = await fs.readJson(this.settingsPath);\n        this.settings = this.mergeDeep(this.defaultSettings, loaded);\n      } else {\n        await this.save();\n      }\n    } catch (error) {\n      console.warn('Failed to load settings, using defaults:', error.message);\n    }\n  }\n\n  async save() {\n    try {\n      await fs.ensureDir(path.dirname(this.settingsPath));\n      await fs.writeJson(this.settingsPath, this.settings, { spaces: 2 });\n    } catch (error) {\n      console.error('Failed to save settings:', error.message);\n    }\n  }\n\n  get(key) {\n    return this.getNestedValue(this.settings, key);\n  }\n\n  set(key, value) {\n    this.setNestedValue(this.settings, key, value);\n    this.save();\n  }\n\n  getNestedValue(obj, path) {\n    return path.split('.').reduce((current, key) => current?.[key], obj);\n  }\n\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    con"
    },
    {
      "path": "src\\utils\\task-memory.js",
      "size": 1027,
      "mtimeMs": 1755061489436.6438,
      "hash": "7a57e9aaa4eaa8540c64fa601fb988db03b787edad1775ddc19d2ac0c791d627",
      "sample": "#!/usr/bin/env node\n\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst CACHE_ROOT = join(process.cwd(), '.AGENT-X', 'cache');\n\nfunction ensureDir(dir) {\n  if (!existsSync(dir)) mkdirSync(dir, { recursive: true });\n}\n\nexport function getTaskCachePath(taskId) {\n  ensureDir(CACHE_ROOT);\n  return join(CACHE_ROOT, `${taskId}.json`);\n}\n\nexport function readTaskMemory(taskId, defaultValue = {}) {\n  const p = getTaskCachePath(taskId);\n  if (!existsSync(p)) return defaultValue;\n  try {\n    return JSON.parse(readFileSync(p, 'utf-8'));\n  } catch {\n    return defaultValue;\n  }\n}\n\nexport function writeTaskMemory(taskId, data) {\n  const p = getTaskCachePath(taskId);\n  ensureDir(dirname(p));\n  writeFileSync(p, JSON.stringify(data, null, 2), 'utf-8');\n  return p;\n}\n\nexport default { getTaskCachePath, readTaskMemory, writeTaskMemory };\n"
    },
    {
      "path": "src\\utils\\ui-manager.js",
      "size": 5980,
      "mtimeMs": 1755029648155.7163,
      "hash": "f6625bd334d6469c376a9b0bd559e2a132212ee3c2c536f217b4329f27c33fd7",
      "sample": "import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass UIManager {\n  constructor() {\n    this.currentLanguage = 'en';\n    this.translations = {};\n    this.supportedLanguages = ['en', 'es', 'fr', 'de', 'ja', 'zh', 'ru'];\n    this.localePath = path.join(__dirname, '..', 'locales');\n    this.settingsFile = path.join(process.cwd(), '.agentx-settings.json');\n  }\n\n  /**\n   * Initialize the UI manager with user's preferred language\n   */\n  async initialize() {\n    try {\n      await this.loadSettings();\n      await this.loadTranslations(this.currentLanguage);\n    } catch (error) {\n      console.warn('Failed to initialize UI manager:', error.message);\n      this.currentLanguage = 'en';\n      await this.loadTranslations('en');\n    }\n  }\n\n  /**\n   * Load user settings from file\n   */\n  async loadSettings() {\n    try {\n      if (fs.existsSync(this.settingsFile)) {\n        const settings = JSON.parse(fs.readFileSync(this.settingsFile, 'utf8'));\n        this.currentLanguage = settings.language || 'en';\n      }\n    } catch (error) {\n      console.warn('Could not load settings, using defaults');\n    }\n  }\n\n  /**\n   * Save user settings to file\n   */\n  async saveSettings(settings = {}) {\n    try {\n      const currentSettings = {};\n      \n      // Load existing settings if file exists\n      if (fs.existsSync(this.settingsFile)) {\n        Object.assign(currentSettings, JSON.parse(fs.readFileSync(this.settingsFile, 'utf8')));\n      }\n\n      // Merge new settings\n      Object.assign(currentSettings, settings);\n      \n      fs.writeFileSync(this.settingsFile, JSON.stringify(currentSettings, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Failed to save settings:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Load translations for a specific language\n   */\n  async loadTranslations(language) {\n    try {\n      const localeFile = path.join(this.localePath, `${language}.jso"
    },
    {
      "path": "tests\\cli.test.js",
      "size": 9903,
      "mtimeMs": 1755034874290.9478,
      "hash": "7564f4705739bb907d071aa11779798a4315f77214693ee7f027173fb326e499",
      "sample": "#!/usr/bin/env node\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { execSync } from 'child_process';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst projectRoot = path.resolve(__dirname, '..');\n\n// Test utilities\nconst runCommand = (cmd, options = {}) => {\n  try {\n    const result = execSync(cmd, {\n      encoding: 'utf8',\n      timeout: 30000,\n      cwd: projectRoot,\n      ...options\n    });\n    return { success: true, output: result, error: null };\n  } catch (error) {\n    return { success: false, output: error.stdout || '', error: error.message };\n  }\n};\n\nconst cleanupTestFiles = () => {\n  const testFiles = [\n    '.agentx-settings.json',\n    'test-output.json',\n    'temp-test-dir'\n  ];\n  \n  testFiles.forEach(file => {\n    const fullPath = path.join(projectRoot, file);\n    if (fs.existsSync(fullPath)) {\n      if (fs.lstatSync(fullPath).isDirectory()) {\n        fs.removeSync(fullPath);\n      } else {\n        fs.unlinkSync(fullPath);\n      }\n    }\n  });\n};\n\ndescribe('AGENTX CLI Tests', () => {\n  beforeEach(() => {\n    cleanupTestFiles();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    cleanupTestFiles();\n  });\n\n  describe('CLI Entry Points', () => {\n    it('should display help for agentx.js', () => {\n      const result = runCommand('node main/agentx.js --help');\n      expect(result.success).toBe(true);\n      expect(result.output).toContain('AGENTX');\n      expect(result.output).toContain('Usage:');\n      expect(result.output).toContain('chat');\n      expect(result.output).toContain('agent');\n      expect(result.output).toContain('demo');\n      expect(result.output).toContain('ui');\n    });\n\n    it('should display version information', () => {\n      const result = runCommand('node main/agentx.js --version');\n      expect(result.success).toBe(true);\n      expect(result.output).toMatch(/\\d+\\.\\d+\\.\\d+/);\n    });\n\n    it('should handle i"
    },
    {
      "path": "tests\\setup.js",
      "size": 1625,
      "mtimeMs": 1755034970858.7402,
      "hash": "743b409b59bf003361fad988ac13f84e18ba5629f229e03b00644ce40ac0c4a2",
      "sample": "// Test setup file for vitest\nimport { vi } from 'vitest';\nimport fs from 'fs-extra';\nimport path from 'path';\n\n// Global test setup\nbeforeEach(() => {\n  // Reset any global state\n  vi.clearAllMocks();\n  \n  // Clean up test artifacts\n  const testArtifacts = [\n    '.agentx-settings.json',\n    'test-output.json',\n    'temp-test-dir',\n    'test-log.txt'\n  ];\n  \n  testArtifacts.forEach(artifact => {\n    const fullPath = path.resolve(artifact);\n    if (fs.existsSync(fullPath)) {\n      try {\n        if (fs.lstatSync(fullPath).isDirectory()) {\n          fs.removeSync(fullPath);\n        } else {\n          fs.unlinkSync(fullPath);\n        }\n      } catch (error) {\n        console.warn(`Failed to cleanup ${fullPath}:`, error.message);\n      }\n    }\n  });\n});\n\n// Mock console methods for cleaner test output\nconst originalConsole = {\n  log: console.log,\n  error: console.error,\n  warn: console.warn,\n  info: console.info\n};\n\n// Only show errors during tests unless DEBUG=true\nif (!process.env.DEBUG) {\n  console.log = vi.fn();\n  console.info = vi.fn();\n  console.warn = vi.fn();\n}\n\n// Restore console on exit\nprocess.on('exit', () => {\n  Object.assign(console, originalConsole);\n});\n\n// Set test environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.AGENTX_TEST_MODE = 'true';\n\n// Mock file system operations for isolated tests\nvi.mock('fs-extra', async () => {\n  const actual = await vi.importActual('fs-extra');\n  return {\n    ...actual,\n    // Add any fs-specific mocks here\n  };\n});\n\n// Mock console for testing\nexport const mockConsole = {\n  log: vi.fn(),\n  error: vi.fn(),\n  warn: vi.fn(),\n  info: vi.fn()\n};"
    },
    {
      "path": "tests\\test-agent-system.js",
      "size": 3214,
      "mtimeMs": 1755040882510.897,
      "hash": "f546153ca7735f6ddc3f05a62aa0f5d48bde7434618f7b76c318593ded25c769",
      "sample": "#!/usr/bin/env node\n\nimport { writeFileSync, readFileSync, unlinkSync } from 'fs';\nimport { join } from 'path';\nimport { AgentOrchestrator } from '../src/agents/orchestrator.js';\n\nclass AgentSystemTester {\n  constructor() {\n    this.testResults = [];\n    this.orchestrator = new AgentOrchestrator();\n  }\n\n  async runTest(name, testFunction) {\n    console.log(`🧪 Running: ${name}`);\n    try {\n      const result = await testFunction();\n      this.testResults.push({ name, passed: true, result });\n      console.log(`✅ PASSED: ${name}`);\n      return result;\n    } catch (error) {\n      this.testResults.push({ name, passed: false, error: error.message });\n      console.log(`❌ FAILED: ${name} - ${error.message}`);\n      return null;\n    }\n  }\n\n  async testFileEditing() {\n    const testFile = 'test-file.js';\n    const originalContent = `function greet(name) {\n  return \"Hello \" + name;\n}\n\nconsole.log(greet(\"World\"));`;\n\n    writeFileSync(testFile, originalContent);\n\n    try {\n      const result = await this.orchestrator.editFile(testFile, \n        \"Add error handling and improve the greet function to handle null/undefined names\"\n      );\n\n      const updatedContent = readFileSync(testFile, 'utf8');\n      \n      // Validate the edit\n      const hasErrorHandling = updatedContent.includes('null') || updatedContent.includes('undefined');\n      const hasImprovedGreet = updatedContent.includes('greet');\n\n      if (hasErrorHandling && hasImprovedGreet) {\n        return { success: true, updatedContent };\n      } else {\n        throw new Error('File edit validation failed');\n      }\n    } finally {\n      if (require('fs').existsSync(testFile)) {\n        unlinkSync(testFile);\n      }\n    }\n  }\n\n  async testAgentDispatch() {\n    const result = await this.orchestrator.dispatchToAgent('code', \n      'Analyze this simple function: function add(a, b) { return a + b; }'\n    );\n    \n    return result.response.includes('add') || result.response.includes('function');\n  }\n\n  async testOrchestration() {\n    const result = await this.orche"
    },
    {
      "path": "tests\\test-expert-system.js",
      "size": 3071,
      "mtimeMs": 1755041018643.233,
      "hash": "63bc82f63c8de410db810d3d55bfa6262160830c7b48429ff0c863f1f8d117b3",
      "sample": "#!/usr/bin/env node\n\nimport ExpertAgentSystem from '../src/agents/expert-system.js';\nimport fs from 'fs';\nimport path from 'path';\n\nasync function runTests() {\n  console.log('🧪 Testing Expert Agent System');\n  console.log('================================');\n  \n  const system = new ExpertAgentSystem();\n  \n  try {\n    // Test 1: Initialize system\n    console.log('\\n1. Testing system initialization...');\n    await system.initialize();\n    console.log('✅ System initialized successfully');\n\n    // Test 2: Check agent loading\n    console.log('\\n2. Testing agent loading...');\n    const agents = Object.keys(system.orchestrator.agents);\n    console.log(`✅ Loaded ${agents.length} expert agents: ${agents.join(', ')}`);\n\n    // Test 3: Knowledge base validation\n    console.log('\\n3. Testing knowledge base...');\n    const hasPrompts = fs.existsSync('./prompts');\n    const hasAgents = fs.existsSync('./prompts/agents');\n    console.log(`✅ Prompts directory: ${hasPrompts}`);\n    console.log(`✅ Agents directory: ${hasAgents}`);\n\n    // Test 4: Expert boundaries\n    console.log('\\n4. Testing expertise boundaries...');\n    for (const agent of agents) {\n      const boundary = system.getExpertiseBoundary(agent);\n      console.log(`   ${agent}: ${boundary.domain}`);\n    }\n\n    // Test 5: Quick agent test\n    console.log('\\n5. Testing expert agent response...');\n    const testResult = await system.processTask('Test analysis', {\n      agent: 'code-analyzer',\n      showThinking: false,\n      includeWebSearch: false\n    });\n    \n    console.log('✅ Expert agent responded correctly');\n    console.log(`   Agent: ${testResult.agent}`);\n    console.log(`   Expertise: ${testResult.expertiseBoundary.domain}`);\n    console.log(`   Knowledge Date: ${testResult.knowledgeDate}`);\n\n    // Test 6: Web search capability\n    console.log('\\n6. Testing web search integration...');\n    const webSearchResult = await system.processTask('Latest security practices', {\n      agent: 'security-expert',\n      showThinking: false,\n      includeWebSear"
    },
    {
      "path": "tests\\verify.js",
      "size": 6926,
      "mtimeMs": 1755035189270.814,
      "hash": "4069e1ad2016f98746e460c0deb2eced17a3b33012cda57b6b905786d15ddc99",
      "sample": "#!/usr/bin/env node\n\nimport { execSync } from 'child_process';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst projectRoot = path.resolve(__dirname, '..');\n\n// Simple test runner without vitest\nclass TestRunner {\n  constructor() {\n    this.tests = [];\n    this.passed = 0;\n    this.failed = 0;\n  }\n\n  test(name, fn) {\n    this.tests.push({ name, fn });\n  }\n\n  async run() {\n    console.log('🧪 AGENTX Verification Tests\\n');\n    \n    for (const test of this.tests) {\n      try {\n        await test.fn();\n        console.log(`✅ ${test.name}`);\n        this.passed++;\n      } catch (error) {\n        console.log(`❌ ${test.name}`);\n        console.log(`   Error: ${error.message}`);\n        this.failed++;\n      }\n    }\n\n    console.log(`\\n📊 Results: ${this.passed} passed, ${this.failed} failed`);\n    return this.failed === 0;\n  }\n\n  assert(condition, message) {\n    if (!condition) {\n      throw new Error(message || 'Assertion failed');\n    }\n  }\n}\n\nconst runner = new TestRunner();\n\n// Helper functions\nconst runCommand = (cmd, options = {}) => {\n  try {\n    const result = execSync(cmd, {\n      encoding: 'utf8',\n      timeout: 10000,\n      cwd: projectRoot,\n      ...options\n    });\n    return { success: true, output: result, error: null };\n  } catch (error) {\n    return { success: false, output: error.stdout || '', error: error.message };\n  }\n};\n\n// CLI Entry Point Tests\nrunner.test('agentx.js should exist and be executable', () => {\n  const agentxPath = path.join(projectRoot, 'main', 'agentx.js');\n  runner.assert(fs.existsSync(agentxPath), 'agentx.js should exist');\n  runner.assert(fs.statSync(agentxPath).mode & 0o100, 'agentx.js should be executable');\n});\n\nrunner.test('agentx.js should display help', () => {\n  const result = runCommand('node main/agentx.js --help');\n  runner.assert(result.success, 'Command should succeed');\n  runner.assert(result.output.includes('AGENTX'), '"
    },
    {
      "path": "tools\\ai-assistant.js",
      "size": 12351,
      "mtimeMs": 1755015276200.6013,
      "hash": "1173847b03df7657063f09ff8c093b12db797145cc864f5b0f146e722095a759",
      "sample": "import OpenAI from 'openai';\nimport dotenv from 'dotenv';\nimport ToolRunner from './tool-runner.js';\n\n// Load environment variables\ndotenv.config();\n\nclass AIAssistant {\n  constructor() {\n    this.openai = new OpenAI({\n      baseURL: 'https://integrate.api.nvidia.com/v1',\n      apiKey: process.env.NVIDIA_API_KEY,\n    });\n    this.model = 'openai/gpt-oss-20b';\n    this.toolRunner = new ToolRunner();\n    this.tools = [\n      {\n        type: 'function',\n        function: {\n          name: 'scan_directory',\n          description: 'Scan a directory and return file structure',\n          parameters: {\n            type: 'object',\n            properties: {\n              dirPath: { type: 'string', description: 'Directory path to scan' },\n              pattern: { type: 'string', description: 'File pattern to match' },\n              maxDepth: { type: 'number', description: 'Maximum directory depth' }\n            },\n            required: ['dirPath']\n          }\n        }\n      },\n      {\n        type: 'function',\n        function: {\n          name: 'read_file',\n          description: 'Read content from a file',\n          parameters: {\n            type: 'object',\n            properties: {\n              filePath: { type: 'string', description: 'File path to read' },\n              lineStart: { type: 'number', description: 'Starting line number' },\n              lineEnd: { type: 'number', description: 'Ending line number' }\n            },\n            required: ['filePath']\n          }\n        }\n      },\n      {\n        type: 'function',\n        function: {\n          name: 'write_file',\n          description: 'Write content to a file',\n          parameters: {\n            type: 'object',\n            properties: {\n              filePath: { type: 'string', description: 'File path to write' },\n              content: { type: 'string', description: 'Content to write' },\n              createBackup: { type: 'boolean', description: 'Create backup before writing' }\n            },\n            required: ['filePath', 'content']\n          }\n   "
    },
    {
      "path": "tools\\mcp\\mcp-server.js",
      "size": 14003,
      "mtimeMs": 1755014966473.8877,
      "hash": "31543be7f16648f6a404c0d8d72867801b9d9ed881b3de958cab8cfbbee1914a",
      "sample": "import { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { glob } from 'glob';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nclass CodebaseMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: 'codebase-tools',\n        version: '1.0.0',\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n    this.setupTools();\n  }\n\n  setupTools() {\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({\n      tools: [\n        {\n          name: 'scan_directory',\n          description: 'Scan a directory and return file structure with metadata',\n          inputSchema: {\n            type: 'object',\n            properties: {\n              path: { type: 'string', description: 'Directory path to scan' },\n              pattern: { type: 'string', description: 'File pattern to match (optional)' },\n              maxDepth: { type: 'number', description: 'Maximum depth to scan (optional)' }\n            },\n            required: ['path']\n          }\n        },\n        {\n          name: 'read_file',\n          description: 'Read and return the contents of a file',\n          inputSchema: {\n            type: 'object',\n            properties: {\n              path: { type: 'string', description: 'File path to read' },\n              lineStart: { type: 'number', description: 'Start line number (optional)' },\n              lineEnd: { type: 'number', description: 'End line number (optional)' }\n            },\n            required: ['path']\n          }\n        },\n        {\n          name: 'write_file',\n          description: 'Write content to a file (creates directories if needed)',\n          inputSchema: {\n            type: 'object',\n            properties: {\n  "
    },
    {
      "path": "tools\\tool-runner.js",
      "size": 6001,
      "mtimeMs": 1755015179079.9148,
      "hash": "e3374a3e09e33340d6d9b5f5b18d66fb5f9b6e4f9db8bff1565ca4f03559c7e6",
      "sample": "import fs from 'fs-extra';\nimport path from 'path';\nimport { glob } from 'glob';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport class ToolRunner {\n  constructor() {\n    this.workingDir = process.cwd();\n  }\n\n  async scanDirectory(dirPath = '.', pattern = '**/*', maxDepth = 5) {\n    const fullPath = path.resolve(this.workingDir, dirPath);\n    const files = await glob(pattern, {\n      cwd: fullPath,\n      dot: false,\n      maxDepth,\n      onlyFiles: false\n    });\n\n    const fileTree = [];\n    for (const file of files) {\n      const fullFilePath = path.join(fullPath, file);\n      try {\n        const stats = await fs.stat(fullFilePath);\n        fileTree.push({\n          path: file,\n          type: stats.isDirectory() ? 'directory' : 'file',\n          size: stats.size,\n          modified: stats.mtime.toISOString(),\n          created: stats.birthtime.toISOString()\n        });\n      } catch (error) {\n        // Skip files that can't be accessed\n      }\n    }\n\n    return {\n      directory: fullPath,\n      files: fileTree\n    };\n  }\n\n  async readFile(filePath, lineStart = 1, lineEnd = null) {\n    const fullPath = path.resolve(this.workingDir, filePath);\n    const content = await fs.readFile(fullPath, 'utf-8');\n    const lines = content.split('\\n');\n    \n    const start = Math.max(0, lineStart - 1);\n    const end = lineEnd ? Math.min(lines.length, lineEnd) : lines.length;\n    const selectedLines = lines.slice(start, end);\n\n    return {\n      file: fullPath,\n      lines: `${start + 1}-${end}`,\n      content: selectedLines.join('\\n'),\n      totalLines: lines.length\n    };\n  }\n\n  async writeFile(filePath, content, createBackup = false) {\n    const fullPath = path.resolve(this.workingDir, filePath);\n    \n    if (createBackup && await fs.pathExists(fullPath)) {\n      const backupPath = `${fullPath}.backup.${Date.now()}`;\n      await fs.copy(fullPath, backupPath);\n    }\n\n    await fs.ensureDir(path.dirname(fullPath));\n    await fs.writeFile(fullPath, content, 'u"
    },
    {
      "path": "translations\\de\\agents.json",
      "size": 577,
      "mtimeMs": 1755031501550.2744,
      "hash": "5a0dcf97be4d65e2ca41e93f36c565b9142fbe3b32f810bc3b0c5a4b5fcb1890",
      "sample": "{\n  \"title\": \"NOT_TRANSLATED\",\n  \"master\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"code_analyzer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"documentation_writer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"bug_fixer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"architect\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"security_expert\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\de\\app.json",
      "size": 184,
      "mtimeMs": 1755031501535.2666,
      "hash": "388d0955d919f3aee0d06632d23c4b187d9c4a31b71af5316b174b388592c371",
      "sample": "{\n  \"error\": \"NOT_TRANSLATED\",\n  \"success\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"version\": \"NOT_TRANSLATED\",\n  \"welcome\": \"NOT_TRANSLATED\",\n  \"loading\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\de\\chat.json",
      "size": 190,
      "mtimeMs": 1755031501539.2651,
      "hash": "97a5bc1a22180be2603d54a63682a7905adf103f3ed92d91f73d81bf37eca689",
      "sample": "{\n  \"response\": \"NOT_TRANSLATED\",\n  \"disconnected\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"prompt\": \"NOT_TRANSLATED\",\n  \"thinking\": \"NOT_TRANSLATED\",\n  \"error\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\de\\common.json",
      "size": 4023,
      "mtimeMs": 1755034915955.6755,
      "hash": "4049d094e09881341225d119699e2139974b66a58fd6e012aec8fdd6724a8d32",
      "sample": "{\n  \"app\": {\n    \"title\": \"Multi-Agent AI CLI-Tool\",\n    \"version\": \"v0.0.1\",\n    \"welcome\": \"Willkommen bei Ihrem KI-gestützten Entwicklungsassistenten\",\n    \"loading\": \"wird geladen\",\n    \"error\": \"[DE] An error occurred\",\n    \"success\": \"[DE] Operation completed successfully\"\n  },\n  \"menu\": {\n    \"title\": \"Hauptmenü\",\n    \"select_option\": \"[DE] Select an option\",\n    \"back\": \"[DE] ← Back\",\n    \"quit\": \"[DE] Quit\",\n    \"cancel\": \"[DE] Cancel\",\n    \"continue\": \"[DE] Continue\",\n    \"options\": {\n      \"chat_with_agent\": \"Mit Agent chatten\",\n      \"list_agents\": \"Verfügbare Agenten auflisten\",\n      \"analyze_codebase\": \"Codebasis analysieren\",\n      \"generate_docs\": \"Dokumentation generieren\",\n      \"fix_bugs\": \"Bugs beheben\",\n      \"security_scan\": \"Sicherheitsscannen\",\n      \"settings\": \"Einstellungen\",\n      \"help\": \"Hilfe\"\n    }\n  },\n  \"agents\": {\n    \"title\": \"Verfügbare Agenten\",\n    \"master\": {\n      \"name\": \"Master-Agent\",\n      \"description\": \"Hauptkoordinator, der Aufgaben an spezialisierte Agenten delegiert\"\n    },\n    \"code_analyzer\": {\n      \"name\": \"Code-Analysator\",\n      \"description\": \"Analysiert Codequalität, Leistung und Best Practices\"\n    },\n    \"documentation_writer\": {\n      \"name\": \"Dokumentationsschreiber\",\n      \"description\": \"Generiert und verbessert Projektdokumentation\"\n    },\n    \"bug_fixer\": {\n      \"name\": \"Bug-Fixer\",\n      \"description\": \"Identifiziert und behebt Bugs und Probleme\"\n    },\n    \"architect\": {\n      \"name\": \"Architekt\",\n      \"description\": \"Entwirft und optimiert Systemarchitektur\"\n    },\n    \"security_expert\": {\n      \"name\": \"Sicherheitsexperte\",\n      \"description\": \"Analysiert Sicherheitslücken und empfiehlt Fixes\"\n    }\n  },\n  \"chat\": {\n    \"title\": \"Chat mit {agent}\",\n    \"prompt\": \"> \",\n    \"thinking\": \"{agent} denkt nach...\",\n    \"response\": \"[DE] {agent} says:\",\n    \"error\": \"Fehler bei der Kommunikation mit {agent}\",\n    \"disconnected\": \"[DE] Chat session ended\"\n  },\n  \"file_operations\": {\n    \"select_path\": \"[DE] Select a path to analyze:\",\n    \"r"
    },
    {
      "path": "translations\\de\\errors.json",
      "size": 225,
      "mtimeMs": 1755031501545.269,
      "hash": "f8d6330f237c24757f087f5db9ae6c2dd4d930fcae6f2b67393fd3b9d932026a",
      "sample": "{\n  \"api_key_missing\": \"NOT_TRANSLATED\",\n  \"network_error\": \"NOT_TRANSLATED\",\n  \"file_not_found\": \"NOT_TRANSLATED\",\n  \"permission_denied\": \"NOT_TRANSLATED\",\n  \"invalid_input\": \"NOT_TRANSLATED\",\n  \"timeout\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\de\\file_operations.json",
      "size": 233,
      "mtimeMs": 1755031501541.2659,
      "hash": "32dbe4e8d0a848239dcdcb9f113a4ac68b4db66738688d72cb88800ec6e01643",
      "sample": "{\n  \"select_path\": \"NOT_TRANSLATED\",\n  \"reading\": \"NOT_TRANSLATED\",\n  \"analyzing\": \"NOT_TRANSLATED\",\n  \"generating\": \"NOT_TRANSLATED\",\n  \"complete\": \"NOT_TRANSLATED\",\n  \"file_count\": \"NOT_TRANSLATED\",\n  \"no_files\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\de\\menu.json",
      "size": 501,
      "mtimeMs": 1755031501538.2654,
      "hash": "fa5390d387d5bc99be7860d9c702983f0d30bfa1f33ae0d8c0259efb8c46efe4",
      "sample": "{\n  \"select_option\": \"NOT_TRANSLATED\",\n  \"back\": \"NOT_TRANSLATED\",\n  \"quit\": \"NOT_TRANSLATED\",\n  \"cancel\": \"NOT_TRANSLATED\",\n  \"continue\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"options\": {\n    \"chat_with_agent\": \"NOT_TRANSLATED\",\n    \"list_agents\": \"NOT_TRANSLATED\",\n    \"analyze_codebase\": \"NOT_TRANSLATED\",\n    \"generate_docs\": \"NOT_TRANSLATED\",\n    \"fix_bugs\": \"NOT_TRANSLATED\",\n    \"security_scan\": \"NOT_TRANSLATED\",\n    \"settings\": \"NOT_TRANSLATED\",\n    \"help\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\de\\progress.json",
      "size": 131,
      "mtimeMs": 1755031501547.2732,
      "hash": "736804671dc806376ac82c3c2555420dae7d59b76ef6a90473a82abd611108cd",
      "sample": "{\n  \"completed\": \"NOT_TRANSLATED\",\n  \"failed\": \"NOT_TRANSLATED\",\n  \"starting\": \"NOT_TRANSLATED\",\n  \"processing\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\de\\settings.json",
      "size": 210,
      "mtimeMs": 1755031501543.2705,
      "hash": "d52fe92b7b52cf1955c7622ace4fe24ed2a431b0518fe10b1ca19f5fdb192706",
      "sample": "{\n  \"save\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"language\": \"NOT_TRANSLATED\",\n  \"select_language\": \"NOT_TRANSLATED\",\n  \"current_language\": \"NOT_TRANSLATED\",\n  \"restart_required\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\de\\ui.json",
      "size": 430,
      "mtimeMs": 1755031501548.2737,
      "hash": "3516c69d20744290fc52cfc1bb1826f23fc8a2d062758fee511076ac92686d78",
      "sample": "{\n  \"navigation\": {\n    \"press_q\": \"NOT_TRANSLATED\",\n    \"use_arrow_keys\": \"NOT_TRANSLATED\",\n    \"press_enter\": \"NOT_TRANSLATED\",\n    \"press_esc\": \"NOT_TRANSLATED\"\n  },\n  \"loading\": {\n    \"spinner\": \"NOT_TRANSLATED\",\n    \"text\": \"NOT_TRANSLATED\"\n  },\n  \"colors\": {\n    \"success\": \"NOT_TRANSLATED\",\n    \"error\": \"NOT_TRANSLATED\",\n    \"warning\": \"NOT_TRANSLATED\",\n    \"info\": \"NOT_TRANSLATED\",\n    \"question\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\en\\agents.json",
      "size": 829,
      "mtimeMs": 1755034691100.945,
      "hash": "692f682ced5251d3aa7b6c535b4d6472ccad0e3505e3e2bc3f482c88ebb14fd7",
      "sample": "{\r\n  \"title\": \"Available Agents\",\r\n  \"master\": {\r\n    \"name\": \"Master Agent\",\r\n    \"description\": \"Orchestrates tasks and synthesizes responses from all agents\"\r\n  },\r\n  \"code_analyzer\": {\r\n    \"name\": \"Code Analyzer\",\r\n    \"description\": \"Analyzes code quality, patterns, and best practices\"\r\n  },\r\n  \"documentation_writer\": {\r\n    \"name\": \"Documentation Writer\",\r\n    \"description\": \"Generates comprehensive documentation and guides\"\r\n  },\r\n  \"bug_fixer\": {\r\n    \"name\": \"Bug Fixer\",\r\n    \"description\": \"Identifies and fixes bugs with detailed explanations\"\r\n  },\r\n  \"architect\": {\r\n    \"name\": \"Architect\",\r\n    \"description\": \"Provides system design and architecture guidance\"\r\n  },\r\n  \"security_expert\": {\r\n    \"name\": \"Security Expert\",\r\n    \"description\": \"Performs security analysis and vulnerability assessment\"\r\n  }\r\n}"
    },
    {
      "path": "translations\\en\\app.json",
      "size": 256,
      "mtimeMs": 1755034649141.8643,
      "hash": "a7a08be045c63c2ddac197e7f160b7bcebacbfa4d0aef6c56d7e87e43e3afb7d",
      "sample": "{\r\n  \"title\": \"Multi-Agent AI CLI Tool\",\r\n  \"version\": \"v0.0.1\",\r\n  \"welcome\": \"Welcome to AGENTX - Your Multi-Agent AI Assistant\",\r\n  \"loading\": \"Initializing AGENTX...\",\r\n  \"error\": \"An error occurred\",\r\n  \"success\": \"Operation completed successfully\"\r\n}"
    },
    {
      "path": "translations\\en\\chat.json",
      "size": 257,
      "mtimeMs": 1755034701273.9126,
      "hash": "c018ba39263bed2f11d2684bf3cea0e78a8d18d032a47a79e794b55d7f8861e4",
      "sample": "{\r\n  \"title\": \"Chat with {agent}\",\r\n  \"prompt\": \"Enter your message (or 'quit' to exit):\",\r\n  \"thinking\": \"{agent} is thinking...\",\r\n  \"response\": \"{agent} says:\",\r\n  \"error\": \"Failed to get response from {agent}\",\r\n  \"disconnected\": \"Chat session ended\"\r\n}"
    },
    {
      "path": "translations\\en\\common.json",
      "size": 3690,
      "mtimeMs": 1755043694633.4495,
      "hash": "14917d548d514e825c1a65735212996f3c2eea8f3c4496ff266a43aa024ea894",
      "sample": "{\n  \"app\": {\n    \"title\": \"Multi-Agent AI CLI Tool\",\n    \"version\": \"v0.0.1\",\n    \"welcome\": \"Welcome to AGENT-X - Your Multi-Agent AI Assistant\",\n    \"loading\": \"Initializing AGENT-E...\",\n    \"error\": \"An error occurred\",\n    \"success\": \"Operation completed successfully\"\n  },\n  \"menu\": {\n    \"title\": \"Main Menu\",\n    \"select_option\": \"Select an option\",\n    \"back\": \"← Back\",\n    \"quit\": \"Quit\",\n    \"cancel\": \"Cancel\",\n    \"continue\": \"Continue\",\n    \"options\": {\n      \"chat_with_agent\": \"💬 Chat with Agent\",\n      \"list_agents\": \"🤖 List Available Agents\",\n      \"analyze_codebase\": \"📊 Analyze Codebase\",\n      \"generate_docs\": \"📝 Generate Documentation\",\n      \"fix_bugs\": \"🐛 Fix Bugs\",\n      \"security_scan\": \"🔒 Security Scan\",\n      \"settings\": \"⚙️ Settings\",\n      \"help\": \"❓ Help\"\n    }\n  },\n  \"agents\": {\n    \"title\": \"Available Agents\",\n    \"master\": {\n      \"name\": \"Master Agent\",\n      \"description\": \"Orchestrates tasks and synthesizes responses from all agents\"\n    },\n    \"code_analyzer\": {\n      \"name\": \"Code Analyzer\",\n      \"description\": \"Analyzes code quality, patterns, and best practices\"\n    },\n    \"documentation_writer\": {\n      \"name\": \"Documentation Writer\",\n      \"description\": \"Generates comprehensive documentation and guides\"\n    },\n    \"bug_fixer\": {\n      \"name\": \"Bug Fixer\",\n      \"description\": \"Identifies and fixes bugs with detailed explanations\"\n    },\n    \"architect\": {\n      \"name\": \"Architect\",\n      \"description\": \"Provides system design and architecture guidance\"\n    },\n    \"security_expert\": {\n      \"name\": \"Security Expert\",\n      \"description\": \"Performs security analysis and vulnerability assessment\"\n    }\n  },\n  \"chat\": {\n    \"title\": \"Chat with {agent}\",\n    \"prompt\": \"Enter your message (or 'quit' to exit):\",\n    \"thinking\": \"{agent} is thinking...\",\n    \"response\": \"{agent} says:\",\n    \"error\": \"Failed to get response from {agent}\",\n    \"disconnected\": \"Chat session ended\"\n  },\n  \"file_operations\": {\n    \"select_path\": \"Select a path to analyze:\",\n    "
    },
    {
      "path": "translations\\en\\errors.json",
      "size": 385,
      "mtimeMs": 1755034752304.3872,
      "hash": "8896f2372254f872a550d62d740b9a8fe9a69361d54cb8c544f3f41896d1d467",
      "sample": "{\r\n  \"api_key_missing\": \"NVIDIA API key not found. Please set NVIDIA_API_KEY environment variable.\",\r\n  \"network_error\": \"Network error occurred. Please check your connection.\",\r\n  \"file_not_found\": \"File or directory not found: {path}\",\r\n  \"permission_denied\": \"Permission denied accessing: {path}\",\r\n  \"invalid_input\": \"Invalid input provided\",\r\n  \"timeout\": \"Operation timed out\"\r\n}"
    },
    {
      "path": "translations\\en\\file-operations.json",
      "size": 298,
      "mtimeMs": 1755034724579.4136,
      "hash": "a6c6a7ca4b8c44adc5288709b0f9947431ace4fe14f25da45005fcae62cc6193",
      "sample": "{\r\n  \"select_path\": \"Select a path to analyze:\",\r\n  \"reading\": \"Reading files...\",\r\n  \"analyzing\": \"Analyzing codebase...\",\r\n  \"generating\": \"Generating output...\",\r\n  \"complete\": \"Analysis complete!\",\r\n  \"file_count\": \"Found {count} files\",\r\n  \"no_files\": \"No files found in the specified path\"\r\n}"
    },
    {
      "path": "translations\\en\\menu.json",
      "size": 521,
      "mtimeMs": 1755034671648.9043,
      "hash": "a58b2aa3d0d292c609b8d4c92bb5fc37210d99b5d7fe22c1db7c0637a694fcf4",
      "sample": "{\r\n  \"title\": \"Main Menu\",\r\n  \"select_option\": \"Select an option\",\r\n  \"back\": \"← Back\",\r\n  \"quit\": \"Quit\",\r\n  \"cancel\": \"Cancel\",\r\n  \"continue\": \"Continue\",\r\n  \"options\": {\r\n    \"chat_with_agent\": \"💬 Chat with Agent\",\r\n    \"list_agents\": \"🤖 List Available Agents\",\r\n    \"analyze_codebase\": \"📊 Analyze Codebase\",\r\n    \"generate_docs\": \"📝 Generate Documentation\",\r\n    \"fix_bugs\": \"🐛 Fix Bugs\",\r\n    \"security_scan\": \"🔒 Security Scan\",\r\n    \"settings\": \"⚙️ Settings\",\r\n    \"help\": \"❓ Help\"\r\n  }\r\n}"
    },
    {
      "path": "translations\\en\\progress.json",
      "size": 197,
      "mtimeMs": 1755034761565.494,
      "hash": "364c4b8cad562c2f1d6db0752c6d5e28cc073c13f484b7f584ede115349aff95",
      "sample": "{\r\n  \"starting\": \"Starting {operation}...\",\r\n  \"processing\": \"Processing... {current}/{total}\",\r\n  \"completed\": \"Completed {operation} in {time}ms\",\r\n  \"failed\": \"Failed to complete {operation}\"\r\n}"
    },
    {
      "path": "translations\\en\\settings.json",
      "size": 268,
      "mtimeMs": 1755034742150.058,
      "hash": "2c977f6db870251270107a03c1cd25e9392090f67c4296453dad473bc830beb3",
      "sample": "{\r\n  \"title\": \"Settings\",\r\n  \"language\": \"Language\",\r\n  \"select_language\": \"Select your preferred language:\",\r\n  \"current_language\": \"Current language: {language}\",\r\n  \"save\": \"Save Settings\",\r\n  \"restart_required\": \"Please restart AGENTX to apply language changes\"\r\n}"
    },
    {
      "path": "translations\\en\\ui.json",
      "size": 444,
      "mtimeMs": 1755034771955.4824,
      "hash": "bdbe193b807902f0a8627a057aea427cc3d953aea07fcfe11dd6d034b5770f40",
      "sample": "{\r\n  \"navigation\": {\r\n    \"use_arrow_keys\": \"Use ↑↓ arrow keys to navigate\",\r\n    \"press_enter\": \"Press Enter to select\",\r\n    \"press_esc\": \"Press Esc to go back\",\r\n    \"press_q\": \"Press Q to quit\"\r\n  },\r\n  \"loading\": {\r\n    \"spinner\": \"⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏\",\r\n    \"text\": \"Loading...\"\r\n  },\r\n  \"colors\": {\r\n    \"success\": \"✅\",\r\n    \"error\": \"❌\",\r\n    \"warning\": \"⚠️\",\r\n    \"info\": \"ℹ️\",\r\n    \"question\": \"❓\"\r\n  }\r\n}"
    },
    {
      "path": "translations\\es\\agents.json",
      "size": 577,
      "mtimeMs": 1755031501570.7627,
      "hash": "5a0dcf97be4d65e2ca41e93f36c565b9142fbe3b32f810bc3b0c5a4b5fcb1890",
      "sample": "{\n  \"title\": \"NOT_TRANSLATED\",\n  \"master\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"code_analyzer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"documentation_writer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"bug_fixer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"architect\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"security_expert\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\es\\app.json",
      "size": 184,
      "mtimeMs": 1755031501555.2783,
      "hash": "388d0955d919f3aee0d06632d23c4b187d9c4a31b71af5316b174b388592c371",
      "sample": "{\n  \"error\": \"NOT_TRANSLATED\",\n  \"success\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"version\": \"NOT_TRANSLATED\",\n  \"welcome\": \"NOT_TRANSLATED\",\n  \"loading\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\es\\chat.json",
      "size": 190,
      "mtimeMs": 1755031501559.2664,
      "hash": "97a5bc1a22180be2603d54a63682a7905adf103f3ed92d91f73d81bf37eca689",
      "sample": "{\n  \"response\": \"NOT_TRANSLATED\",\n  \"disconnected\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"prompt\": \"NOT_TRANSLATED\",\n  \"thinking\": \"NOT_TRANSLATED\",\n  \"error\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\es\\common.json",
      "size": 4174,
      "mtimeMs": 1755043701040.702,
      "hash": "b4055be8376c4eeaa8fd7e4ca79f923f55afaa83e9139985ddb1b6e9712a9e07",
      "sample": "{\n  \"app\": {\n    \"title\": \"Herramienta CLI Multi-Agente de IA\",\n    \"version\": \"v0.0.1\",\n    \"welcome\": \"Bienvenido a AGENT-E - Tu Asistente Multi-Agente de IA\",\n    \"loading\": \"Inicializando AGENT-E...\",\n    \"error\": \"Ocurrió un error\",\n    \"success\": \"Operación completada exitosamente\"\n  },\n  \"menu\": {\n    \"title\": \"Menú Principal\",\n    \"select_option\": \"Selecciona una opción\",\n    \"back\": \"← Atrás\",\n    \"quit\": \"Salir\",\n    \"cancel\": \"Cancelar\",\n    \"continue\": \"Continuar\",\n    \"options\": {\n      \"chat_with_agent\": \"💬 Chatear con Agente\",\n      \"list_agents\": \"🤖 Listar Agentes Disponibles\",\n      \"analyze_codebase\": \"📊 Analizar Código\",\n      \"generate_docs\": \"📝 Generar Documentación\",\n      \"fix_bugs\": \"🐛 Corregir Errores\",\n      \"security_scan\": \"🔒 Escaneo de Seguridad\",\n      \"settings\": \"⚙️ Configuración\",\n      \"help\": \"❓ Ayuda\"\n    }\n  },\n  \"agents\": {\n    \"title\": \"Agentes Disponibles\",\n    \"master\": {\n      \"name\": \"Agente Maestro\",\n      \"description\": \"Orquesta tareas y sintetiza respuestas de todos los agentes\"\n    },\n    \"code_analyzer\": {\n      \"name\": \"Analizador de Código\",\n      \"description\": \"Analiza calidad de código, patrones y mejores prácticas\"\n    },\n    \"documentation_writer\": {\n      \"name\": \"Escritor de Documentación\",\n      \"description\": \"Genera documentación y guías comprehensivas\"\n    },\n    \"bug_fixer\": {\n      \"name\": \"Corrector de Errores\",\n      \"description\": \"Identifica y corrige errores con explicaciones detalladas\"\n    },\n    \"architect\": {\n      \"name\": \"Arquitecto\",\n      \"description\": \"Proporciona orientación de diseño y arquitectura\"\n    },\n    \"security_expert\": {\n      \"name\": \"Experto en Seguridad\",\n      \"description\": \"Realiza análisis de seguridad y evaluación de vulnerabilidades\"\n    }\n  },\n  \"chat\": {\n    \"title\": \"Chatear con {agent}\",\n    \"prompt\": \"Ingresa tu mensaje (o 'salir' para salir):\",\n    \"thinking\": \"{agent} está pensando...\",\n    \"response\": \"{agent} dice:\",\n    \"error\": \"Error al obtener respuesta de {"
    },
    {
      "path": "translations\\es\\errors.json",
      "size": 225,
      "mtimeMs": 1755031501564.752,
      "hash": "f8d6330f237c24757f087f5db9ae6c2dd4d930fcae6f2b67393fd3b9d932026a",
      "sample": "{\n  \"api_key_missing\": \"NOT_TRANSLATED\",\n  \"network_error\": \"NOT_TRANSLATED\",\n  \"file_not_found\": \"NOT_TRANSLATED\",\n  \"permission_denied\": \"NOT_TRANSLATED\",\n  \"invalid_input\": \"NOT_TRANSLATED\",\n  \"timeout\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\es\\file_operations.json",
      "size": 233,
      "mtimeMs": 1755031501560.7522,
      "hash": "32dbe4e8d0a848239dcdcb9f113a4ac68b4db66738688d72cb88800ec6e01643",
      "sample": "{\n  \"select_path\": \"NOT_TRANSLATED\",\n  \"reading\": \"NOT_TRANSLATED\",\n  \"analyzing\": \"NOT_TRANSLATED\",\n  \"generating\": \"NOT_TRANSLATED\",\n  \"complete\": \"NOT_TRANSLATED\",\n  \"file_count\": \"NOT_TRANSLATED\",\n  \"no_files\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\es\\menu.json",
      "size": 501,
      "mtimeMs": 1755031501557.2769,
      "hash": "fa5390d387d5bc99be7860d9c702983f0d30bfa1f33ae0d8c0259efb8c46efe4",
      "sample": "{\n  \"select_option\": \"NOT_TRANSLATED\",\n  \"back\": \"NOT_TRANSLATED\",\n  \"quit\": \"NOT_TRANSLATED\",\n  \"cancel\": \"NOT_TRANSLATED\",\n  \"continue\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"options\": {\n    \"chat_with_agent\": \"NOT_TRANSLATED\",\n    \"list_agents\": \"NOT_TRANSLATED\",\n    \"analyze_codebase\": \"NOT_TRANSLATED\",\n    \"generate_docs\": \"NOT_TRANSLATED\",\n    \"fix_bugs\": \"NOT_TRANSLATED\",\n    \"security_scan\": \"NOT_TRANSLATED\",\n    \"settings\": \"NOT_TRANSLATED\",\n    \"help\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\es\\progress.json",
      "size": 131,
      "mtimeMs": 1755031501566.7603,
      "hash": "736804671dc806376ac82c3c2555420dae7d59b76ef6a90473a82abd611108cd",
      "sample": "{\n  \"completed\": \"NOT_TRANSLATED\",\n  \"failed\": \"NOT_TRANSLATED\",\n  \"starting\": \"NOT_TRANSLATED\",\n  \"processing\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\es\\settings.json",
      "size": 210,
      "mtimeMs": 1755031501562.7559,
      "hash": "d52fe92b7b52cf1955c7622ace4fe24ed2a431b0518fe10b1ca19f5fdb192706",
      "sample": "{\n  \"save\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"language\": \"NOT_TRANSLATED\",\n  \"select_language\": \"NOT_TRANSLATED\",\n  \"current_language\": \"NOT_TRANSLATED\",\n  \"restart_required\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\es\\ui.json",
      "size": 430,
      "mtimeMs": 1755031501568.7512,
      "hash": "3516c69d20744290fc52cfc1bb1826f23fc8a2d062758fee511076ac92686d78",
      "sample": "{\n  \"navigation\": {\n    \"press_q\": \"NOT_TRANSLATED\",\n    \"use_arrow_keys\": \"NOT_TRANSLATED\",\n    \"press_enter\": \"NOT_TRANSLATED\",\n    \"press_esc\": \"NOT_TRANSLATED\"\n  },\n  \"loading\": {\n    \"spinner\": \"NOT_TRANSLATED\",\n    \"text\": \"NOT_TRANSLATED\"\n  },\n  \"colors\": {\n    \"success\": \"NOT_TRANSLATED\",\n    \"error\": \"NOT_TRANSLATED\",\n    \"warning\": \"NOT_TRANSLATED\",\n    \"info\": \"NOT_TRANSLATED\",\n    \"question\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\fr\\agents.json",
      "size": 577,
      "mtimeMs": 1755031501589.9446,
      "hash": "5a0dcf97be4d65e2ca41e93f36c565b9142fbe3b32f810bc3b0c5a4b5fcb1890",
      "sample": "{\n  \"title\": \"NOT_TRANSLATED\",\n  \"master\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"code_analyzer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"documentation_writer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"bug_fixer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"architect\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"security_expert\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\fr\\app.json",
      "size": 184,
      "mtimeMs": 1755031501574.7615,
      "hash": "388d0955d919f3aee0d06632d23c4b187d9c4a31b71af5316b174b388592c371",
      "sample": "{\n  \"error\": \"NOT_TRANSLATED\",\n  \"success\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"version\": \"NOT_TRANSLATED\",\n  \"welcome\": \"NOT_TRANSLATED\",\n  \"loading\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\fr\\chat.json",
      "size": 190,
      "mtimeMs": 1755031501578.797,
      "hash": "97a5bc1a22180be2603d54a63682a7905adf103f3ed92d91f73d81bf37eca689",
      "sample": "{\n  \"response\": \"NOT_TRANSLATED\",\n  \"disconnected\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"prompt\": \"NOT_TRANSLATED\",\n  \"thinking\": \"NOT_TRANSLATED\",\n  \"error\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\fr\\common.json",
      "size": 4177,
      "mtimeMs": 1755034915970.6753,
      "hash": "f52eb3c1dd9f9b2fe2a37ecf3d95364e175793605561b552da1161a6dc9ba853",
      "sample": "{\n  \"app\": {\n    \"title\": \"Outil CLI Multi-Agent IA\",\n    \"version\": \"v0.0.1\",\n    \"welcome\": \"Bienvenue dans votre assistant de développement alimenté par IA\",\n    \"loading\": \"chargement\",\n    \"error\": \"[FR] An error occurred\",\n    \"success\": \"[FR] Operation completed successfully\"\n  },\n  \"menu\": {\n    \"title\": \"Menu Principal\",\n    \"select_option\": \"[FR] Select an option\",\n    \"back\": \"[FR] ← Back\",\n    \"quit\": \"[FR] Quit\",\n    \"cancel\": \"[FR] Cancel\",\n    \"continue\": \"[FR] Continue\",\n    \"options\": {\n      \"chat_with_agent\": \"Discuter avec un agent\",\n      \"list_agents\": \"Lister les agents disponibles\",\n      \"analyze_codebase\": \"Analyser la base de code\",\n      \"generate_docs\": \"Générer de la documentation\",\n      \"fix_bugs\": \"Corriger des bugs\",\n      \"security_scan\": \"Analyse de sécurité\",\n      \"settings\": \"Paramètres\",\n      \"help\": \"Aide\"\n    }\n  },\n  \"agents\": {\n    \"title\": \"Agents Disponibles\",\n    \"master\": {\n      \"name\": \"Agent Principal\",\n      \"description\": \"Coordinatrice principale qui délègue les tâches aux agents spécialisés\"\n    },\n    \"code_analyzer\": {\n      \"name\": \"Analyseur de Code\",\n      \"description\": \"Analyse la qualité, les performances et les meilleures pratiques du code\"\n    },\n    \"documentation_writer\": {\n      \"name\": \"Rédacteur de Documentation\",\n      \"description\": \"Génère et améliore la documentation du projet\"\n    },\n    \"bug_fixer\": {\n      \"name\": \"Correcteur de Bugs\",\n      \"description\": \"Identifie et corrige les bugs et les problèmes\"\n    },\n    \"architect\": {\n      \"name\": \"Architecte\",\n      \"description\": \"Conçoit et optimise l'architecture du système\"\n    },\n    \"security_expert\": {\n      \"name\": \"Expert en Sécurité\",\n      \"description\": \"Analyse les vulnérabilités de sécurité et recommande des correctifs\"\n    }\n  },\n  \"chat\": {\n    \"title\": \"Chat avec {agent}\",\n    \"prompt\": \"> \",\n    \"thinking\": \"{agent} réfléchit...\",\n    \"response\": \"[FR] {agent} says:\",\n    \"error\": \"Erreur lors de la communication avec {agent}\",\n    \"disconnec"
    },
    {
      "path": "translations\\fr\\errors.json",
      "size": 225,
      "mtimeMs": 1755031501584.4878,
      "hash": "f8d6330f237c24757f087f5db9ae6c2dd4d930fcae6f2b67393fd3b9d932026a",
      "sample": "{\n  \"api_key_missing\": \"NOT_TRANSLATED\",\n  \"network_error\": \"NOT_TRANSLATED\",\n  \"file_not_found\": \"NOT_TRANSLATED\",\n  \"permission_denied\": \"NOT_TRANSLATED\",\n  \"invalid_input\": \"NOT_TRANSLATED\",\n  \"timeout\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\fr\\file_operations.json",
      "size": 233,
      "mtimeMs": 1755031501580.6023,
      "hash": "32dbe4e8d0a848239dcdcb9f113a4ac68b4db66738688d72cb88800ec6e01643",
      "sample": "{\n  \"select_path\": \"NOT_TRANSLATED\",\n  \"reading\": \"NOT_TRANSLATED\",\n  \"analyzing\": \"NOT_TRANSLATED\",\n  \"generating\": \"NOT_TRANSLATED\",\n  \"complete\": \"NOT_TRANSLATED\",\n  \"file_count\": \"NOT_TRANSLATED\",\n  \"no_files\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\fr\\menu.json",
      "size": 501,
      "mtimeMs": 1755031501576.7603,
      "hash": "fa5390d387d5bc99be7860d9c702983f0d30bfa1f33ae0d8c0259efb8c46efe4",
      "sample": "{\n  \"select_option\": \"NOT_TRANSLATED\",\n  \"back\": \"NOT_TRANSLATED\",\n  \"quit\": \"NOT_TRANSLATED\",\n  \"cancel\": \"NOT_TRANSLATED\",\n  \"continue\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"options\": {\n    \"chat_with_agent\": \"NOT_TRANSLATED\",\n    \"list_agents\": \"NOT_TRANSLATED\",\n    \"analyze_codebase\": \"NOT_TRANSLATED\",\n    \"generate_docs\": \"NOT_TRANSLATED\",\n    \"fix_bugs\": \"NOT_TRANSLATED\",\n    \"security_scan\": \"NOT_TRANSLATED\",\n    \"settings\": \"NOT_TRANSLATED\",\n    \"help\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\fr\\progress.json",
      "size": 131,
      "mtimeMs": 1755031501586.942,
      "hash": "736804671dc806376ac82c3c2555420dae7d59b76ef6a90473a82abd611108cd",
      "sample": "{\n  \"completed\": \"NOT_TRANSLATED\",\n  \"failed\": \"NOT_TRANSLATED\",\n  \"starting\": \"NOT_TRANSLATED\",\n  \"processing\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\fr\\settings.json",
      "size": 210,
      "mtimeMs": 1755031501581.635,
      "hash": "d52fe92b7b52cf1955c7622ace4fe24ed2a431b0518fe10b1ca19f5fdb192706",
      "sample": "{\n  \"save\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"language\": \"NOT_TRANSLATED\",\n  \"select_language\": \"NOT_TRANSLATED\",\n  \"current_language\": \"NOT_TRANSLATED\",\n  \"restart_required\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\fr\\ui.json",
      "size": 430,
      "mtimeMs": 1755031501587.947,
      "hash": "3516c69d20744290fc52cfc1bb1826f23fc8a2d062758fee511076ac92686d78",
      "sample": "{\n  \"navigation\": {\n    \"press_q\": \"NOT_TRANSLATED\",\n    \"use_arrow_keys\": \"NOT_TRANSLATED\",\n    \"press_enter\": \"NOT_TRANSLATED\",\n    \"press_esc\": \"NOT_TRANSLATED\"\n  },\n  \"loading\": {\n    \"spinner\": \"NOT_TRANSLATED\",\n    \"text\": \"NOT_TRANSLATED\"\n  },\n  \"colors\": {\n    \"success\": \"NOT_TRANSLATED\",\n    \"error\": \"NOT_TRANSLATED\",\n    \"warning\": \"NOT_TRANSLATED\",\n    \"info\": \"NOT_TRANSLATED\",\n    \"question\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\ru\\agents.json",
      "size": 577,
      "mtimeMs": 1755031501613.19,
      "hash": "5a0dcf97be4d65e2ca41e93f36c565b9142fbe3b32f810bc3b0c5a4b5fcb1890",
      "sample": "{\n  \"title\": \"NOT_TRANSLATED\",\n  \"master\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"code_analyzer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"documentation_writer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"bug_fixer\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"architect\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  },\n  \"security_expert\": {\n    \"name\": \"NOT_TRANSLATED\",\n    \"description\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\ru\\app.json",
      "size": 184,
      "mtimeMs": 1755031501593.03,
      "hash": "388d0955d919f3aee0d06632d23c4b187d9c4a31b71af5316b174b388592c371",
      "sample": "{\n  \"error\": \"NOT_TRANSLATED\",\n  \"success\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"version\": \"NOT_TRANSLATED\",\n  \"welcome\": \"NOT_TRANSLATED\",\n  \"loading\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\ru\\chat.json",
      "size": 190,
      "mtimeMs": 1755031501597.18,
      "hash": "97a5bc1a22180be2603d54a63682a7905adf103f3ed92d91f73d81bf37eca689",
      "sample": "{\n  \"response\": \"NOT_TRANSLATED\",\n  \"disconnected\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"prompt\": \"NOT_TRANSLATED\",\n  \"thinking\": \"NOT_TRANSLATED\",\n  \"error\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\ru\\common.json",
      "size": 435,
      "mtimeMs": 1755037516140.0747,
      "hash": "bf76677b52de66dcc3a5d6dabdff4d10394f8e39697d23b5f067afd03f548eb4",
      "sample": "{\n  \"common\": {\n    \"welcome\": \"[RU] Welcome\",  \n    \"hello\": \"[RU] Hello\",\n    \"goodbye\": \"[RU] Goodbye\",\n    \"yes\": \"[RU] Yes\",\n    \"no\": \"[RU] No\",\n    \"save\": \"[RU] Save\",\n    \"cancel\": \"[RU] Cancel\",\n    \"delete\": \"[RU] Delete\",\n    \"edit\": \"[RU] Edit\",\n    \"loading\": \"[RU] Loading...\"\n  },\n  \"navigation\": {\n    \"home\": \"[RU] Home\",\n    \"about\": \"[RU] About\",\n    \"contact\": \"[RU] Contact\",\n    \"settings\": \"[RU] Settings\"\n  }\n}"
    },
    {
      "path": "translations\\ru\\errors.json",
      "size": 225,
      "mtimeMs": 1755031501608.187,
      "hash": "f8d6330f237c24757f087f5db9ae6c2dd4d930fcae6f2b67393fd3b9d932026a",
      "sample": "{\n  \"api_key_missing\": \"NOT_TRANSLATED\",\n  \"network_error\": \"NOT_TRANSLATED\",\n  \"file_not_found\": \"NOT_TRANSLATED\",\n  \"permission_denied\": \"NOT_TRANSLATED\",\n  \"invalid_input\": \"NOT_TRANSLATED\",\n  \"timeout\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\ru\\file_operations.json",
      "size": 233,
      "mtimeMs": 1755031501605.1902,
      "hash": "32dbe4e8d0a848239dcdcb9f113a4ac68b4db66738688d72cb88800ec6e01643",
      "sample": "{\n  \"select_path\": \"NOT_TRANSLATED\",\n  \"reading\": \"NOT_TRANSLATED\",\n  \"analyzing\": \"NOT_TRANSLATED\",\n  \"generating\": \"NOT_TRANSLATED\",\n  \"complete\": \"NOT_TRANSLATED\",\n  \"file_count\": \"NOT_TRANSLATED\",\n  \"no_files\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\ru\\menu.json",
      "size": 501,
      "mtimeMs": 1755031501595.032,
      "hash": "fa5390d387d5bc99be7860d9c702983f0d30bfa1f33ae0d8c0259efb8c46efe4",
      "sample": "{\n  \"select_option\": \"NOT_TRANSLATED\",\n  \"back\": \"NOT_TRANSLATED\",\n  \"quit\": \"NOT_TRANSLATED\",\n  \"cancel\": \"NOT_TRANSLATED\",\n  \"continue\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"options\": {\n    \"chat_with_agent\": \"NOT_TRANSLATED\",\n    \"list_agents\": \"NOT_TRANSLATED\",\n    \"analyze_codebase\": \"NOT_TRANSLATED\",\n    \"generate_docs\": \"NOT_TRANSLATED\",\n    \"fix_bugs\": \"NOT_TRANSLATED\",\n    \"security_scan\": \"NOT_TRANSLATED\",\n    \"settings\": \"NOT_TRANSLATED\",\n    \"help\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "translations\\ru\\progress.json",
      "size": 131,
      "mtimeMs": 1755031501610.182,
      "hash": "736804671dc806376ac82c3c2555420dae7d59b76ef6a90473a82abd611108cd",
      "sample": "{\n  \"completed\": \"NOT_TRANSLATED\",\n  \"failed\": \"NOT_TRANSLATED\",\n  \"starting\": \"NOT_TRANSLATED\",\n  \"processing\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\ru\\settings.json",
      "size": 210,
      "mtimeMs": 1755031501606.1875,
      "hash": "d52fe92b7b52cf1955c7622ace4fe24ed2a431b0518fe10b1ca19f5fdb192706",
      "sample": "{\n  \"save\": \"NOT_TRANSLATED\",\n  \"title\": \"NOT_TRANSLATED\",\n  \"language\": \"NOT_TRANSLATED\",\n  \"select_language\": \"NOT_TRANSLATED\",\n  \"current_language\": \"NOT_TRANSLATED\",\n  \"restart_required\": \"NOT_TRANSLATED\"\n}"
    },
    {
      "path": "translations\\ru\\ui.json",
      "size": 430,
      "mtimeMs": 1755031501611.1885,
      "hash": "3516c69d20744290fc52cfc1bb1826f23fc8a2d062758fee511076ac92686d78",
      "sample": "{\n  \"navigation\": {\n    \"press_q\": \"NOT_TRANSLATED\",\n    \"use_arrow_keys\": \"NOT_TRANSLATED\",\n    \"press_enter\": \"NOT_TRANSLATED\",\n    \"press_esc\": \"NOT_TRANSLATED\"\n  },\n  \"loading\": {\n    \"spinner\": \"NOT_TRANSLATED\",\n    \"text\": \"NOT_TRANSLATED\"\n  },\n  \"colors\": {\n    \"success\": \"NOT_TRANSLATED\",\n    \"error\": \"NOT_TRANSLATED\",\n    \"warning\": \"NOT_TRANSLATED\",\n    \"info\": \"NOT_TRANSLATED\",\n    \"question\": \"NOT_TRANSLATED\"\n  }\n}"
    },
    {
      "path": "utils\\settings-manager.js",
      "size": 3693,
      "mtimeMs": 1755040687601.9082,
      "hash": "f90adb560f02884e8ea7618980fd55e2a55f6e9a8a7c138703a773b111927f92",
      "sample": "import fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass SettingsManager {\n  constructor() {\n    this.settingsPath = path.join(process.cwd(), '.agentx-settings.json');\n    this.defaultSettings = {\n      api: {\n        provider: 'nvidia',\n        model: 'openai/gpt-oss-20b',\n        baseURL: 'https://integrate.api.nvidia.com/v1',\n        maxTokens: 2000,\n        temperature: 0.7\n      },\n      ui: {\n        theme: 'dark',\n        language: 'en',\n        animations: true,\n        sound: false\n      },\n      agents: {\n        defaultTimeout: 30000,\n        maxRetries: 3,\n        parallelProcessing: true\n      },\n      files: {\n        autoBackup: true,\n        backupDir: '.agentx-backups',\n        maxFileSize: 1024 * 1024 * 10 // 10MB\n      },\n      logging: {\n        level: 'info',\n        saveLogs: true,\n        logDir: '.agentx-logs'\n      }\n    };\n    this.settings = { ...this.defaultSettings };\n    this.load();\n  }\n\n  async load() {\n    try {\n      if (await fs.pathExists(this.settingsPath)) {\n        const loaded = await fs.readJson(this.settingsPath);\n        this.settings = this.mergeDeep(this.defaultSettings, loaded);\n      } else {\n        await this.save();\n      }\n    } catch (error) {\n      console.warn('Failed to load settings, using defaults:', error.message);\n    }\n  }\n\n  async save() {\n    try {\n      await fs.ensureDir(path.dirname(this.settingsPath));\n      await fs.writeJson(this.settingsPath, this.settings, { spaces: 2 });\n    } catch (error) {\n      console.error('Failed to save settings:', error.message);\n    }\n  }\n\n  get(key) {\n    return this.getNestedValue(this.settings, key);\n  }\n\n  set(key, value) {\n    this.setNestedValue(this.settings, key, value);\n    this.save();\n  }\n\n  getNestedValue(obj, path) {\n    return path.split('.').reduce((current, key) => current?.[key], obj);\n  }\n\n  setNestedValue(obj, path, value) {\n    const keys = path.split('.');\n    con"
    },
    {
      "path": "utils\\ui-manager.js",
      "size": 5980,
      "mtimeMs": 1755040691486.3079,
      "hash": "f6625bd334d6469c376a9b0bd559e2a132212ee3c2c536f217b4329f27c33fd7",
      "sample": "import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass UIManager {\n  constructor() {\n    this.currentLanguage = 'en';\n    this.translations = {};\n    this.supportedLanguages = ['en', 'es', 'fr', 'de', 'ja', 'zh', 'ru'];\n    this.localePath = path.join(__dirname, '..', 'locales');\n    this.settingsFile = path.join(process.cwd(), '.agentx-settings.json');\n  }\n\n  /**\n   * Initialize the UI manager with user's preferred language\n   */\n  async initialize() {\n    try {\n      await this.loadSettings();\n      await this.loadTranslations(this.currentLanguage);\n    } catch (error) {\n      console.warn('Failed to initialize UI manager:', error.message);\n      this.currentLanguage = 'en';\n      await this.loadTranslations('en');\n    }\n  }\n\n  /**\n   * Load user settings from file\n   */\n  async loadSettings() {\n    try {\n      if (fs.existsSync(this.settingsFile)) {\n        const settings = JSON.parse(fs.readFileSync(this.settingsFile, 'utf8'));\n        this.currentLanguage = settings.language || 'en';\n      }\n    } catch (error) {\n      console.warn('Could not load settings, using defaults');\n    }\n  }\n\n  /**\n   * Save user settings to file\n   */\n  async saveSettings(settings = {}) {\n    try {\n      const currentSettings = {};\n      \n      // Load existing settings if file exists\n      if (fs.existsSync(this.settingsFile)) {\n        Object.assign(currentSettings, JSON.parse(fs.readFileSync(this.settingsFile, 'utf8')));\n      }\n\n      // Merge new settings\n      Object.assign(currentSettings, settings);\n      \n      fs.writeFileSync(this.settingsFile, JSON.stringify(currentSettings, null, 2));\n      return true;\n    } catch (error) {\n      console.error('Failed to save settings:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Load translations for a specific language\n   */\n  async loadTranslations(language) {\n    try {\n      const localeFile = path.join(this.localePath, `${language}.jso"
    },
    {
      "path": "vitest.config.js",
      "size": 534,
      "mtimeMs": 1755034957969.618,
      "hash": "5449b5e4df2d6327b12cfb524eb48bb84ae016e79ec523b238f8364ddba5a90c",
      "sample": "import { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    environment: 'node',\n    coverage: {\n      reporter: ['text', 'json', 'html'],\n      exclude: [\n        'node_modules/',\n        'tests/',\n        '**/*.config.js',\n        '**/*.config.ts',\n        '**/*.d.ts',\n        '**/dist/**',\n        '**/build/**',\n        '**/.git/**'\n      ]\n    },\n    testTimeout: 30000,\n    hookTimeout: 30000,\n    setupFiles: ['./tests/setup.js']\n  },\n  esbuild: {\n    target: 'node18'\n  }\n});"
    }
  ]
}